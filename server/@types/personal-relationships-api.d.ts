/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/sync/{prisonerNumber}/number-of-children': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the number of children for a prisoner by prisonerNumber
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to get the number of children for one prisoner.
     *
     */
    get: operations['syncGetNumberOfChildrenByPrisonerNumber']
    /**
     * Create or Updates the number of children for a prisoner
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to update a prisoner's number of children.
     *
     */
    put: operations['syncUpdateNumberOfChildren']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/{prisonerNumber}/domestic-status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the domestic status for a prisoner by prisonerNumber
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to get the domestic status for one prisoner.
     *
     */
    get: operations['syncGetDomesticStatusByPrisonerNumber']
    /**
     * Create or Updates the domestic status for a prisoner
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to update a prisoner's domestic status.
     *
     */
    put: operations['syncUpdateDomesticStatus']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/prisoner-restriction/{prisonerRestrictionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a prisoner restriction by id
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to get the details for one prisoner restriction.
     *
     */
    get: operations['syncGetPrisonerRestrictionById']
    /**
     * Updates an existing prisoner restriction by internal ID
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to update a prisoner restriction.
     *
     */
    put: operations['syncUpdatePrisonerRestriction']
    post?: never
    /**
     * Deletes one prisoner restriction by internal ID
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to delete a prisoner restriction.
     *
     */
    delete: operations['syncDeletePrisonerRestrictionById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/prisoner-contact/{prisonerContactId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a prisoner contact by prisonerContactId
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to get the details for one prisoner contact.
     *
     */
    get: operations['syncGetPrisonerContactById']
    /**
     * Updates a prisoner contact with new or extra detail
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to update a prisoner contact.
     *
     */
    put: operations['syncUpdatePrisonerContact']
    post?: never
    /**
     * Deletes one prisoner contact by internal ID
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to delete a prisoner contact.
     *
     */
    delete: operations['syncDeletePrisonerContactById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/prisoner-contact-restriction/{prisonerContactRestrictionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a prisoner contact restriction by id
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to get the details for one prisoner contact restriction.
     *
     */
    get: operations['syncGetPrisonerContactRestrictionById']
    /**
     * Updates a prisoner contact restriction with new or extra detail
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to update a prisoner contact restriction.
     *
     */
    put: operations['syncUpdatePrisonerContactRestriction']
    post?: never
    /**
     * Deletes one prisoner contact restriction by internal ID
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to delete a prisoner contact restriction.
     *
     */
    delete: operations['syncDeletePrisonerContactRestrictionById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/employment/{employmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for an employment record by employmentId
     * @description Requires role: PERSONAL_RELATIONSHIPS_MIGRATION. Used to get the details for one employment record.
     */
    get: operations['syncGetEmploymentById']
    /**
     * Updates an employment record
     * @description Requires role: PERSONAL_RELATIONSHIPS_MIGRATION. Used to update an employment record.
     */
    put: operations['syncUpdateEmployment']
    post?: never
    /**
     * Deletes an employment record by internal ID
     * @description Requires role: PERSONAL_RELATIONSHIPS_MIGRATION. Delete an employment record by internal ID.
     */
    delete: operations['syncDeleteEmploymentById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact/{contactId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a contact by contactId
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to get the details for one contact.
     *
     */
    get: operations['syncGetContactById']
    /**
     * Updates a contact with new or extra detail
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to update a contact.
     *
     */
    put: operations['syncUpdateContact']
    post?: never
    /**
     * Deletes one contact by internal ID
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to delete a contact.
     *
     */
    delete: operations['syncDeleteContactById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-restriction/{contactRestrictionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a contact restriction by contactRestrictionId
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to get the details for one contact restriction.
     *
     */
    get: operations['syncGetContactRestrictionById']
    /**
     * Updates a contact restriction with new or extra detail
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to update a contact restriction.
     *
     */
    put: operations['syncUpdateContactRestriction']
    post?: never
    /**
     * Deletes one contact restriction by internal ID
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to delete a contact restriction.
     *
     */
    delete: operations['syncDeleteContactRestrictionById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-phone/{contactPhoneId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a contact phone by contactPhoneId
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to get the details for one contact phone.
     *
     */
    get: operations['syncGetContactPhoneById']
    /**
     * Updates a phone number for a contact
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to update a contact's phone number.
     *
     */
    put: operations['syncUpdateContactPhone']
    post?: never
    /**
     * Deletes one contact phone by internal ID
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to delete a contact phone.
     *
     */
    delete: operations['syncDeleteContactPhoneById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-identity/{contactIdentityId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a contact identity by contactIdentityId
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to get the details for one contact identity.
     *
     */
    get: operations['syncGetContactIdentityById']
    /**
     * Updates a contact identity with new or extra detail
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to update a contact identity.
     *
     */
    put: operations['syncUpdateContactIdentity']
    post?: never
    /**
     * Deletes one contact identity by internal ID
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to delete a contact identity.
     *
     */
    delete: operations['syncDeleteContactIdentityById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-email/{contactEmailId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a contact email by contactEmailId
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to get the details for one contact email.
     *
     */
    get: operations['syncGetContactEmailById']
    /**
     * Updates a contact email with new or extra detail
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to update a contact email.
     *
     */
    put: operations['syncUpdateContactEmail']
    post?: never
    /**
     * Deletes one contact email by internal ID
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to delete a contact email.
     *
     */
    delete: operations['syncDeleteContactEmailById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-address/{contactAddressId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for a contact address by contactAddressId
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to get the details for one contact address.
     *
     */
    get: operations['syncGetContactAddressById']
    /**
     * Updates a contact address with new or extra detail
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to update a contact address.
     *
     */
    put: operations['syncUpdateContactAddress']
    post?: never
    /**
     * Deletes a contact address by internal ID
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to delete a contact address.
     *
     */
    delete: operations['syncDeleteContactAddressById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-address-phone/{contactAddressPhoneId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Returns the data for an address-soecific phone number by contactAddressPhoneId
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to get the details for one address-specific phone number.
     *
     */
    get: operations['syncGetContactPhoneById_1']
    /**
     * Updates an address-specific phone number
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to update an address-specific phone number for a contact.
     *
     */
    put: operations['syncUpdateContactAddressPhone']
    post?: never
    /**
     * Deletes an addres-specific phone number by internal ID
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Delete an address-specific phone number by internal ID.
     *
     */
    delete: operations['syncDeleteContactAddressPhoneById']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner/{prisonerNumber}/number-of-children': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get prisoner number of children */
    get: operations['getNumberOfChildren']
    /** Create or update prisoner number of children */
    put: operations['createOrUpdateNumberOfChildren']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner/{prisonerNumber}/domestic-status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get prisoner domestic status */
    get: operations['getDomesticStatus']
    /** Create or update prisoner domestic status */
    put: operations['createOrUpdateDomesticStatus']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-contact/{prisonerContactId}/restriction/{prisonerContactRestrictionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update prisoner contact restriction
     * @description Updates a prisoner contact restriction for the specified prisoner contact relationship and restriction ids
     */
    put: operations['updatePrisonerContactRestriction']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/merge/keep/{keepingPrisonerNumber}/remove/{removedPrisonerNumber}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Handle the details of a prisoner when merging prisoner records
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to merge a prisoner's records.
     *
     */
    put: operations['merge']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/restriction/{contactRestrictionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update global restriction for a contact
     * @description Updates a global (estate-wide) restriction for the specified contact and restriction id
     */
    put: operations['updateContactGlobalRestriction']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/phone/{contactPhoneId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a phone number
     * @description Gets a contacts phone number by id
     */
    get: operations['getPhone']
    /**
     * Update contact phone number
     * @description Updates an existing contact phone by id
     */
    put: operations['updatePhone']
    post?: never
    /**
     * Delete contact phone number
     * @description Deletes an existing contact phone by id
     */
    delete: operations['deletePhone']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/identity/{contactIdentityId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an identity
     * @description Gets a contacts identity by id
     */
    get: operations['getIdentityNumber']
    /**
     * Update contact identity
     * @description Updates an existing contact identity by id
     */
    put: operations['updateIdentityNumber']
    post?: never
    /**
     * Delete contact identity
     * @description Deletes an existing contact identity by id
     */
    delete: operations['deleteIdentityNumber']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/employment/{employmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an employment
     * @description Get a single employment by id
     */
    get: operations['getEmployment']
    /**
     * Update employment
     * @description Update a single employment for a contact
     */
    put: operations['updateEmployment']
    post?: never
    /**
     * Delete employment
     * @description Delete a single employment for a contact
     */
    delete: operations['deleteEmployment']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/email/{contactEmailId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an email
     * @description Gets a contacts email by id
     */
    get: operations['getEmailAddress']
    /**
     * Update contact email
     * @description Updates an existing contact email by id
     */
    put: operations['updateEmailAddress']
    post?: never
    /**
     * Delete contact email
     * @description Deletes an existing contact email by id
     */
    delete: operations['deleteEmailAddress']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/address/{contactAddressId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a contact address
     * @description Get a contact address by its ID
     */
    get: operations['getContactAddress']
    /**
     * Update a contact address
     * @description Updates an existing contact address by its ID
     */
    put: operations['updateContactAddress']
    post?: never
    /**
     * Delete contact address
     * @description Deletes a contact address by its ID
     */
    delete: operations['deleteContactAddress']
    options?: never
    head?: never
    /**
     * Patch a contact address individual fields as a patch
     * @description Patches an existing contact address by its ID
     */
    patch: operations['patchContactAddress']
    trace?: never
  }
  '/contact/{contactId}/address/{contactAddressId}/phone/{contactAddressPhoneId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an address-specific phone number
     * @description Get an address-specific phone number by its ID
     */
    get: operations['getContactAddressPhone']
    /**
     * Update an address-specific phone number
     * @description Updates an address-specific phone number by its ID
     */
    put: operations['updateContactAddressPhone']
    post?: never
    /**
     * Delete an address-specific phone number
     * @description Deletes an address-specific phone number by its ID
     */
    delete: operations['deleteContactAddress_1']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/prisoner-restriction': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new prisoner restriction
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to create a prisoner restriction.
     *
     */
    post: operations['syncCreatePrisonerRestriction']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/prisoner-contact': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new prisoner contact
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to create a prisoner contact.
     *
     */
    post: operations['syncCreatePrisonerContact']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/prisoner-contact-restriction': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new prisoner contact restriction
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to create a prisoner contact restriction.
     *
     */
    post: operations['syncCreatePrisonerContactRestriction']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/employment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new employment record
     * @description Requires role: PERSONAL_RELATIONSHIPS_MIGRATION. Used to create a new employment record.
     */
    post: operations['syncCreateEmployment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new contact
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to create a contact and associate it with a contact.
     *
     */
    post: operations['syncCreateContact']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-restriction': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new contact restriction
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to create a contact restriction and associate it with a contact.
     *
     */
    post: operations['syncCreateContactRestriction']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-phone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new contact phone
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to create a contact phone and associate it with a contact.
     *
     */
    post: operations['syncCreateContactPhone']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-identity': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new contact identity
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to create a contact identity and associate it with a contact.
     *
     */
    post: operations['syncCreateContactIdentity']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new contact email
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to create a contact email and associate it with a contact.
     *
     */
    post: operations['syncCreateContactEmail']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-address': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new contact address
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to create a contact address and associate it with a contact.
     *
     */
    post: operations['syncCreateContactAddress']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact-address-phone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new address-specific phone number
     * @description
     *           Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.
     *           Used to create an address-specific phone number.
     *
     */
    post: operations['syncCreateContactAddressPhone']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/admin/reset': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Removes and recreates relationships and restrictions for one prisoner to reset them to match what exists in NOMIS.
     * @description Similar to a merge but for one prisoner, catering for events like booking moves, new bookings, and reinstated bookings
     */
    post: operations['resetPrisonerContacts']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/admin/merge': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Removes and recreates relationships and restrictions after a prisoner merge in NOMIS
     * @description Relationships are removed for the old and new numbers, and then recreated for new number only
     */
    post: operations['mergePrisonerContacts']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-contact': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Add a new prisoner contact relationship
     * @description Creates a new relationship between the contact and a prisoner.
     */
    post: operations['addContactRelationship']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-contact/{prisonerContactId}/restriction': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the prisoner contact restrictions
     * @description
     *           Get the restrictions that apply for this relationship.
     *
     *           This includes prisoner-contact restrictions for this specific relationship only and any global (estate-wide) restrictions for the contact.
     *
     *           If the prisoner and contact have multiple relationships, the prisoner-contact restrictions for the other relationships will not be returned.
     *
     */
    get: operations['getPrisonerContactRestrictionsByPrisonerContactId']
    put?: never
    /**
     * Create new prisoner contact restriction
     * @description Creates a new prisoner contact restriction for the specified prisoner contact relationship
     */
    post: operations['createPrisonerContactRestriction']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/prisoner-restrictions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Migrate restrictions for prisoner
     * @description Migrate a prisoner's restrictions from NOMIS.
     */
    post: operations['migratePrisonerRestrictions']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/number-of-children': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Migrate number of children for prisoner
     * @description Migrate a prisoner's number of children from NOMIS.
     */
    post: operations['migrateNumberOfChildren']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/domestic-status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Migrate domestic status for prisoner
     * @description Migrate a prisoner's domestic status from NOMIS.
     */
    post: operations['migrateDomesticStatus']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/contact': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Migrate a contact
     * @description Migrate a contact from NOMIS with all of its associated data.
     */
    post: operations['migrateContact']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a new contact
     * @description Creates a new contact that is not yet associated with any prisoner.
     */
    post: operations['createContact']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/restriction': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a contacts global restrictions
     * @description
     *           Get a contacts global restrictions only. Global restrictions apply to all of a contacts relationships and are known as estate-wide restrictions in NOMIS.
     *
     *           Additional restrictions between the contact and specific prisoners may also apply.
     *
     */
    get: operations['getContactGlobalRestrictions']
    put?: never
    /**
     * Create new global restriction
     * @description Creates a new global (estate-wide) restriction for the specified contact
     */
    post: operations['createContactGlobalRestriction']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/phones': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create multiple new contact phone numbers
     * @description Creates one or more phone numbers for the specified contact
     */
    post: operations['createMultipleContactPhoneNumber']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/phone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create new contact phone number
     * @description Creates a new phone number for the specified contact
     */
    post: operations['createPhone']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/identity': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create new contact identity
     * @description Creates a new identity for the specified contact
     */
    post: operations['createIdentityNumber']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/identities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create multiple contact identities
     * @description Creates one or more new identities for the specified contact
     */
    post: operations['createMultipleIdentities']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/employment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create employment
     * @description Create a single employment for a contact
     */
    post: operations['createEmployment']
    delete?: never
    options?: never
    head?: never
    /**
     * Patch employments
     * @description Allows several updates to employments in one go. Includes creating new employments, updating existing employments and removing existing employments.
     */
    patch: operations['patchEmployment']
    trace?: never
  }
  '/contact/{contactId}/emails': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create multiple contact email addresses
     * @description Creates one or more new email addresses for the specified contact
     */
    post: operations['createMultipleEmailAddresses']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create new contact email
     * @description Creates a new email for the specified contact
     */
    post: operations['createEmailAddress']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/address': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create new contact address
     * @description Creates a new address for the specified contact
     */
    post: operations['createContactAddress']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/address/{contactAddressId}/phones': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create multiple address-specific phone numbers
     * @description Creates one or more address-specific phone numbers
     */
    post: operations['createMultipleContactAddressPhones']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/address/{contactAddressId}/phone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create new address-specific phone number
     * @description Creates a new address-specific phone number
     */
    post: operations['createContactAddressPhone']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner-contact/{prisonerContactId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Endpoint to get a prisoner contact relationship by relationship id */
    get: operations['getPrisonerContactById']
    put?: never
    post?: never
    /**
     * Delete prisoner contact relationship
     * @description Delete the relationship between the contact and a prisoner. Only allowed if there are no relationship restrictions.
     */
    delete: operations['deleteContactRelationship']
    options?: never
    head?: never
    /**
     * Update prisoner contact relationship
     * @description Update the relationship between the contact and a prisoner.
     */
    patch: operations['patchContactRelationship']
    trace?: never
  }
  '/contact/{contactId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get contact
     * @description Gets a contact by their id
     */
    get: operations['getContact']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update a contact
     * @description Update a contact
     */
    patch: operations['patchContact']
    trace?: never
  }
  '/sync/prisoner/{prisonerNumber}/reconcile': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Reconciliation endpoint for a single prisoner by prisoner number
     * @description Get all the relationships, active and inactive, and their restrictions for one prisoner
     */
    get: operations['reconcileSinglePrisoner']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact/{contactId}/reconcile': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Reconciliation endpoint for a single contact by ID
     * @description Get a minimal version of a contact and its main sub-entities to reconcile against
     */
    get: operations['reconcileSingleContact']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/sync/contact/reconcile': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Reconciliation endpoint
     * @description Get a paged list of existing contact IDs to reconcile against
     */
    get: operations['reconcileContacts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/reference-codes/group/{groupCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Endpoint to return reference data for a provided group key. Sorted by display order then description by default. */
    get: operations['getReferenceDataByGroup']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner/{prisonNumber}/contact': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Fetch contact relationships by prisoner number with the requested filtering applied with pagination */
    get: operations['getAllContacts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner/{prisonNumber}/contact/{contactId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all relationships between a specific prisoner and contact
     * @description Prisoners can have multiple relationships defined with a single contact which is a security risk and highly discouraged.
     *           |This API should be used to help dissuade users from creating multiple relationships between a single prisoner and contact wherever possible.
     *
     */
    get: operations['getAllSummariesForPrisonerAndContact']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoner/{prisonNumber}/contact/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Count of a prisoner's active contact relationships for their current term by relationship type */
    get: operations['getContactRelationshipCount']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/name': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get contact name
     * @description Gets a contacts name details by their id. Includes title code, description, first name, middle names and last name.
     */
    get: operations['getContactName']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/{contactId}/linked-prisoners': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get linked prisoners
     * @description Gets a list of prisoners that have an active relationship with the contact. Sorted by prisoner lastName, firstName, middleNames and the prisoner number.
     */
    get: operations['getContactLinkedPrisoners']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/contact/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search contacts
     * @description Search all contacts by their last name or first name or middle name or date of birth
     */
    get: operations['searchContacts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Request to update a prisoner's number of children */
    SyncUpdatePrisonerNumberOfChildrenRequest: {
      /**
       * @description The number of children
       * @example 1
       */
      numberOfChildren?: string
      /**
       * @description Username of the person who created the record
       * @example JSMITH_ADM
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the record was created
       */
      createdTime: string
    }
    SyncPrisonerNumberOfChildrenResponse: {
      /**
       * Format: int64
       * @description The unique identifier of the prisoner's number of children
       * @example 1
       */
      id: number
      /** @description The number of children of the prisoner */
      numberOfChildren?: string
      /** @description Is this the active number of children of the prisoner */
      active: boolean
      /**
       * Format: date-time
       * @description Creation date and time
       */
      createdTime?: string
      /** @description Username of the creator */
      createdBy?: string
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      errorCode?: string
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description Request to update a prisoner's domestic status */
    SyncUpdatePrisonerDomesticStatusRequest: {
      /**
       * @description The domestic status code value
       * @example 1
       */
      domesticStatusCode?: string
      /**
       * @description Username of the person who created the record
       * @example JSMITH_ADM
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the record was created
       */
      createdTime: string
    }
    SyncPrisonerDomesticStatusResponse: {
      /**
       * Format: int64
       * @description The unique identifier of the prisoner's domestic status
       * @example 1
       */
      id: number
      /** @description The domestic status value of the prisoner */
      domesticStatusCode?: string
      /** @description Is this the active domestic status code of the prisoner */
      active: boolean
      /**
       * Format: date-time
       * @description Creation date and time
       */
      createdTime?: string
      /** @description Username of the creator */
      createdBy?: string
    }
    /** @description Request to update a prisoner restriction */
    SyncUpdatePrisonerRestrictionRequest: {
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description The restriction type
       * @example NO_VISIT
       */
      restrictionType: string
      /**
       * Format: date
       * @description Effective date of the restriction
       * @example 2024-06-11
       */
      effectiveDate: string
      /**
       * Format: date
       * @description Expiry date of the restriction
       * @example 2024-12-31
       */
      expiryDate?: string
      /**
       * @description True if this restriction applies to the latest or current term in prison, false if a previous term
       * @example true
       */
      currentTerm?: boolean
      /**
       * @description Comment text
       * @example No visits allowed
       */
      commentText?: string
      /**
       * @description Authorised staff user name
       * @example JSMITH
       */
      authorisedUsername: string
      /**
       * @description Username of the person who last updated the record
       * @example JDOE_ADM
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description Timestamp when the record was last updated
       */
      updatedTime?: string
    }
    /** @description Prisoner restriction sync response */
    SyncPrisonerRestriction: {
      /**
       * Format: int64
       * @description The internal ID for the prisoner restriction
       * @example 12345
       */
      prisonerRestrictionId: number
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description The restriction type
       * @example NO_VISIT
       */
      restrictionType: string
      /**
       * Format: date
       * @description Effective date of the restriction
       * @example 2024-06-11
       */
      effectiveDate: string
      /**
       * Format: date
       * @description Expiry date of the restriction
       * @example 2024-12-31
       */
      expiryDate?: string
      /**
       * @description Comment text
       * @example No visits allowed
       */
      commentText?: string
      /**
       * @description Authorised staff user name
       * @example JSMITH
       */
      authorisedUsername: string
      /**
       * @description True if this restriction applies to the latest or current term in prison, false if a previous term
       * @example true
       */
      currentTerm: boolean
      /**
       * @description Username of the person who created the record
       * @example JSMITH_ADM
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the record was created
       */
      createdTime: string
      /**
       * @description Username of the person who last updated the record
       * @example JDOE_ADM
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the record was last updated
       */
      updatedTime?: string
    }
    /** @description Request object to update prisoner contact details */
    SyncUpdatePrisonerContactRequest: {
      /**
       * Format: int64
       * @description The ID of the prisoner contact
       * @example 12345
       */
      contactId: number
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description
       *           Coded value indicating either a social or official contact (mandatory).
       *           This is a coded value from the group code CONTACT_TYPE in reference data.
       *           Known values are (S) Social or (O) official.
       *
       * @example S
       */
      contactType: string
      /**
       * @description The type of relationship
       * @example Friend
       */
      relationshipType: string
      /**
       * @description Indicates if the prisoner contact is next of kin
       * @example true
       */
      nextOfKin: boolean
      /**
       * @description Indicates if the prisoner contact is an emergency contact
       * @example true
       */
      emergencyContact: boolean
      /**
       * @description Additional comments about the prisoner contact
       * @example Close family friend
       */
      comments?: string
      /**
       * @description Indicates if the prisoner contact is active
       * @example true
       */
      active: boolean
      /**
       * @description Indicates if the prisoner contact is an approved visitor
       * @example false
       */
      approvedVisitor: boolean
      /**
       * @description Indicates if this relationship applies to the latest booking
       * @example true
       */
      currentTerm: boolean
      /**
       * Format: date
       * @description The expiry date of the prisoner contact
       * @example 2025-01-01
       */
      expiryDate?: string
      /**
       * @description The prison where the prisoner contact was created
       * @example HMP Belmarsh
       */
      createdAtPrison?: string
      /**
       * @description The user who last updated the prisoner contact
       * @example adminUser
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description The timestamp of when the prisoner contact was changed
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    /** @description Response object with prisoner contact details */
    SyncPrisonerContact: {
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      id: number
      /**
       * Format: int64
       * @description The ID of the prisoner contact
       * @example 12345
       */
      contactId: number
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description
       *           Coded value indicating either a social or official contact (mandatory).
       *           This is a coded value (from the group code CONTACT_TYPE in reference data).
       *           Known values are (S) Social or (O) official.
       *
       * @example S
       */
      contactType: string
      /**
       * @description The relationship code from reference data
       * @example Friend
       */
      relationshipType: string
      /**
       * @description Indicates if the prisoner contact is next of kin
       * @example true
       */
      nextOfKin: boolean
      /**
       * @description Indicates if the prisoner contact is an emergency contact
       * @example true
       */
      emergencyContact: boolean
      /**
       * @description Additional comments about the prisoner contact
       * @example Close family friend
       */
      comments?: string
      /**
       * @description Indicates if the prisoner contact is active
       * @example true
       */
      active: boolean
      /**
       * @description Indicates if the prisoner contact is an approved visitor
       * @example true
       */
      approvedVisitor: boolean
      /**
       * @description Indicates if this relationship applies to the latest booking
       * @example true
       */
      currentTerm: boolean
      /**
       * Format: date
       * @description The expiry date of the prisoner contact
       * @example 2025-01-01
       */
      expiryDate?: string
      /**
       * @description The prison where the prisoner contact was created
       * @example HMP Belmarsh
       */
      createdAtPrison?: string
      /**
       * @description The user who created the prisoner contact
       * @example system
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp when the prisoner contact was created
       * @example 2024-01-01T12:00:00
       */
      createdTime: string
      /**
       * @description The user who last updated the prisoner contact
       * @example adminUser
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description The timestamp when the prisoner contact was last updated
       * @example 2024-02-01T16:00:00Z
       */
      updatedTime?: string
    }
    /** @description Request object to update te  prisoner contact restriction details */
    SyncUpdatePrisonerContactRestrictionRequest: {
      /**
       * @description Type of restriction applied
       * @example NoContact
       */
      restrictionType: string
      /**
       * Format: date
       * @description Start date of the restriction
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description Expiry date of the restriction, if applicable
       * @example 2024-12-31
       */
      expiryDate?: string
      /**
       * @description Comments regarding the restriction
       * @example Restriction applied due to safety concerns
       */
      comments?: string
      /**
       * @description User who last updated the restriction record
       * @example editor
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Time when the restriction record was last updated
       * @example 2024-10-02T15:30:00Z
       */
      updatedTime?: string
    }
    /** @description Response object with prisoner contact restriction details */
    SyncPrisonerContactRestriction: {
      /**
       * Format: int64
       * @description ID of the prisoner contact restriction
       * @example 232
       */
      prisonerContactRestrictionId: number
      /**
       * Format: int64
       * @description ID of the prisoner contact (relationship) to which the restriction applies
       * @example 12345
       */
      prisonerContactId: number
      /**
       * Format: int64
       * @description ID of the contact (person) to which the restriction applies
       * @example 12345
       */
      contactId: number
      /**
       * @description The prisoner number involved in this relationship restriction
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * @description
       *         The coded type of restriction that applies to this relationship.
       *         This is a coded value from the group RESTRICTION in reference codes.
       *         Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.
       *
       * @example NONCON
       */
      restrictionType?: string
      /**
       * Format: date
       * @description Start date of the restriction
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description Expiry date of the restriction, if applicable
       * @example 2024-12-31
       */
      expiryDate?: string
      /**
       * @description Comments regarding the restriction
       * @example Restriction applied due to safety concerns
       */
      comments?: string
      /**
       * @description User who created the restriction record
       * @example admin
       */
      createdBy?: string
      /**
       * Format: date-time
       * @description Time when the restriction record was created
       * @example 2024-10-01T12:00:00Z
       */
      createdTime?: string
      /**
       * @description User who last updated the restriction record
       * @example editor
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Time when the restriction record was last updated
       * @example 2024-10-02T15:30:00Z
       */
      updatedTime?: string
    }
    /** @description The request to update details of an employment record via sync */
    SyncUpdateEmploymentRequest: {
      /**
       * Format: int64
       * @description The ID of the organization associated with the employment
       * @example 12345
       */
      organisationId: number
      /**
       * Format: int64
       * @description The ID of the contact associated with the employment
       * @example 67890
       */
      contactId: number
      /**
       * @description If the employment is active
       * @example true
       */
      active: boolean
      /**
       * @description The username of the person who made the update
       * @example JD000001
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description The time when the update was made
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    /** @description The response of an employment record via sync */
    SyncEmployment: {
      /**
       * Format: int64
       * @description The ID of the employment
       * @example 12345
       */
      employmentId: number
      /**
       * Format: int64
       * @description The ID of the organization associated with the employment
       * @example 12345
       */
      organisationId: number
      /**
       * Format: int64
       * @description The ID of the contact associated with the employment
       * @example 67890
       */
      contactId: number
      /**
       * @description If the employment is active
       * @example true
       */
      active: boolean
      /**
       * @description User who created the employment record
       * @example admin
       */
      createdBy?: string
      /**
       * Format: date-time
       * @description Time when the employment record was created
       * @example 2024-10-01T12:00:00Z
       */
      createdTime?: string
      /**
       * @description User who last updated the employment record
       * @example editor
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Time when the employment record was last updated
       * @example 2024-10-02T15:30:00Z
       */
      updatedTime?: string
    }
    /** @description Request to update a new contact  */
    SyncUpdateContactRequest: {
      /**
       * @description
       *         The title code for the contact.
       *         This is a coded value (from the group code TITLE in reference data).
       *         Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.
       *
       * @example MR
       */
      title?: string
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleName?: string
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /**
       * @description Whether the contact is a staff member
       * @example false
       */
      isStaff: boolean
      /**
       * @description Whether the contact is a remitter
       * @example false
       */
      remitter: boolean
      /**
       * @description Whether the contact is deceased
       * @example false
       */
      deceasedFlag?: boolean
      /**
       * Format: date
       * @description The date the contact was deceased, if applicable
       * @example 2023-05-01
       */
      deceasedDate?: string
      /**
       * @description
       *         The gender code for the contact.
       *         This is a coded value (from the group code GENDER in reference data).
       *         Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.
       *
       * @example M
       */
      gender?: string
      /**
       * @description The domestic status code of the contact
       * @example S
       */
      domesticStatus?: string
      /**
       * @description The language code of the contact
       * @example EN
       */
      languageCode?: string
      /**
       * @description Whether an interpreter is required
       * @example false
       */
      interpreterRequired?: boolean
      /**
       * @description The id of the user who updated the contact
       * @example JD000001
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was changed
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
      staff?: boolean
    }
    /** @description The details of a contact as an individual */
    SyncContact: {
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      id: number
      /**
       * @description
       *         The title code for the contact.
       *         This is a coded value (from the group code TITLE in reference data).
       *         Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.
       *
       * @example MR
       */
      title?: string
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleName?: string
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /**
       * @description Whether the contact is a staff member
       * @example false
       */
      isStaff: boolean
      /**
       * @description Whether the contact is a remitter
       * @example false
       */
      remitter: boolean
      /**
       * @description Whether the contact is deceased
       * @example false
       */
      deceasedFlag?: boolean
      /**
       * Format: date
       * @description The date the contact was deceased, if applicable
       * @example 2023-05-01
       */
      deceasedDate?: string
      /**
       * @description
       *         The gender code for the contact.
       *         This is a coded value (from the group code GENDER in reference data).
       *         Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.
       *
       * @example M
       */
      gender?: string
      /**
       * @description The domestic status code of the contact
       * @example S
       */
      domesticStatus?: string
      /**
       * @description The language code of the contact
       * @example EN
       */
      languageCode?: string
      /**
       * @description Whether an interpreter is required
       * @example false
       */
      interpreterRequired?: boolean
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
      /**
       * @description User who updated the entry
       * @example admin2
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was updated
       * @example 2023-09-24T12:00:00
       */
      updatedTime?: string
      staff?: boolean
    }
    /** @description Request to update a contact restriction  */
    SyncUpdateContactRestrictionRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of restriction
       * @example MOBILE
       */
      restrictionType: string
      /**
       * Format: date
       * @description Restriction start date
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description Restriction end date
       * @example 2024-01-01
       */
      expiryDate?: string
      /**
       * @description Any comments about the restriction
       * @example N/A
       */
      comments?: string
      /**
       * @description The id of the user who updated the contact restriction
       * @example JD000001
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact restriction was changed
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    /** @description Restriction related to a contact */
    SyncContactRestriction: {
      /**
       * Format: int64
       * @description Unique identifier for the contact restriction
       * @example 1
       */
      contactRestrictionId: number
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of restriction
       * @example MOBILE
       */
      restrictionType: string
      /**
       * Format: date
       * @description Restriction created date
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description Restriction end date
       * @example 2024-01-01
       */
      expiryDate?: string
      /**
       * @description Comments for the restriction
       * @example N/A
       */
      comments?: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
      /**
       * @description User who updated the entry
       * @example admin2
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was updated
       * @example 2023-09-24T12:00:00
       */
      updatedTime?: string
    }
    /** @description Request to update a new contact phone number for sync API */
    SyncUpdateContactPhoneRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of phone
       * @example MOB
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
      /**
       * @description The id of the user who updated the contact phone
       * @example JD000001
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact phone was changed
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    /** @description Phone related to a contact for sync API */
    SyncContactPhone: {
      /**
       * Format: int64
       * @description Unique identifier for the contact phone
       * @example 1
       */
      contactPhoneId: number
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of phone
       * @example MOB
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
      /**
       * @description User who updated the entry
       * @example admin2
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was updated
       * @example 2023-09-24T12:00:00
       */
      updatedTime?: string
    }
    /** @description Request to update a new contact identity  */
    SyncUpdateContactIdentityRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of identity
       * @example DL
       */
      identityType: string
      /**
       * @description Identity
       * @example S99PH898989L
       */
      identityValue: string
      /**
       * @description Issuing authority
       * @example DVLA
       */
      issuingAuthority?: string
      /**
       * @description The id of the user who updated the contact identity
       * @example JD000001
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact identity was changed
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    /** @description Identity related to a contact */
    SyncContactIdentity: {
      /**
       * Format: int64
       * @description Unique identifier for the contact identity
       * @example 1
       */
      contactIdentityId: number
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of identity
       * @example DL
       */
      identityType: string
      /**
       * @description Identity
       * @example DL090 0909 909
       */
      identityValue: string
      /**
       * @description Issuing authority
       * @example DVLA
       */
      issuingAuthority?: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
      /**
       * @description User who updated the entry
       * @example admin2
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was updated
       * @example 2023-09-24T12:00:00
       */
      updatedTime?: string
    }
    /** @description Request to update a contact email address by sync with NOMIS */
    SyncUpdateContactEmailRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Email address
       * @example test@example.com
       */
      emailAddress: string
      /**
       * @description The id of the user who updated the contact email
       * @example JD000001
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact email was changed
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    /** @description Email related to a contact */
    SyncContactEmail: {
      /**
       * Format: int64
       * @description Unique identifier for the contact email
       * @example 1
       */
      contactEmailId: number
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Email address
       * @example test@example.com
       */
      emailAddress: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
      /**
       * @description User who updated the entry
       * @example admin2
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was updated
       * @example 2023-09-24T12:00:00
       */
      updatedTime?: string
    }
    /** @description Request to update a contact address */
    SyncUpdateContactAddressRequest: {
      /**
       * Format: int64
       * @description The id of the contact linked to this address
       * @example 123456
       */
      contactId: number
      /**
       * @description
       *         The type of address.
       *         This is a coded value (from the group code ADDRESS_TYPE in reference data).
       *         The known values are HOME, WORK or BUS (business address).
       *
       * @example HOME
       */
      addressType?: string
      /**
       * @description True if this is the primary address otherwise false
       * @example true
       */
      primaryAddress: boolean
      /**
       * @description Flat number or name
       * @example Flat 2B
       */
      flat?: string
      /**
       * @description Building or house number or name
       * @example Mansion House
       */
      property?: string
      /**
       * @description Street or road name
       * @example Acacia Avenue
       */
      street?: string
      /**
       * @description Area
       * @example Morton Heights
       */
      area?: string
      /**
       * @description City code - from NOMIS reference data
       * @example BIRM
       */
      cityCode?: string
      /**
       * @description County code - from NOMIS reference data
       * @example WMIDS
       */
      countyCode?: string
      /**
       * @description Postcode
       * @example S13 4FH
       */
      postcode?: string
      /**
       * @description Country code - from NOMIS reference data
       * @example UK
       */
      countryCode?: string
      /**
       * @description Whether the address has been verified by postcode lookup
       * @example false
       */
      verified: boolean
      /**
       * @description Whether the address can be used for mailing
       * @example false
       */
      mailFlag?: boolean
      /**
       * Format: date
       * @description The start date when this address can be considered active from
       * @example 2023-01-12
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date when this address can be considered active until
       * @example 2023-01-12
       */
      endDate?: string
      /**
       * @description Flag to indicate this address should be considered as no fixed address
       * @example false
       */
      noFixedAddress?: boolean
      /**
       * @description Any additional information or comments about the address
       * @example Some additional information
       */
      comments?: string
      /**
       * @description The id of the user who updated the address
       * @example JD000001
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the address was changed
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    /** @description An address related to a contact */
    SyncContactAddress: {
      /**
       * Format: int64
       * @description The id of the contact address
       * @example 123456
       */
      contactAddressId: number
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      contactId: number
      /**
       * @description
       *         The type of address.
       *         This is a coded value (from the group code ADDRESS_TYPE in reference data).
       *         The known values are HOME, WORK or BUS (business address).
       *
       * @example HOME
       */
      addressType?: string
      /**
       * @description True if this is the primary address otherwise false
       * @example true
       */
      primaryAddress: boolean
      /**
       * @description Flat number or name
       * @example Flat 2B
       */
      flat?: string
      /**
       * @description Building or house number or name
       * @example Mansion House
       */
      property?: string
      /**
       * @description Street or road name
       * @example Acacia Avenue
       */
      street?: string
      /**
       * @description Area
       * @example Morton Heights
       */
      area?: string
      /**
       * @description City code - from NOMIS
       * @example BIRM
       */
      cityCode?: string
      /**
       * @description County code - from NOMIS
       * @example WMIDS
       */
      countyCode?: string
      /**
       * @description Postcode
       * @example S13 4FH
       */
      postcode?: string
      /**
       * @description Country code - from NOMIS
       * @example UK
       */
      countryCode?: string
      /**
       * @description Whether the address has been verified by postcode lookup
       * @example false
       */
      verified: boolean
      /**
       * @description Which username ran the postcode lookup check
       * @example NJKG44D
       */
      verifiedBy?: string
      /**
       * Format: date-time
       * @description The timestamp of when the postcode lookup was done
       * @example 2024-01-01T00:00:00Z
       */
      verifiedTime?: string
      /**
       * @description Flag to indicate whether mail is allowed to be sent to this address
       * @example false
       */
      mailFlag: boolean
      /**
       * Format: date
       * @description The start date when this address is to be considered active from
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date when this address is to be considered no longer active
       * @example 2024-01-01
       */
      endDate?: string
      /**
       * @description Flag to indicate whether this address indicates no fixed address
       * @example false
       */
      noFixedAddress: boolean
      /**
       * @description Any additional information or comments about the address
       * @example Some additional information
       */
      comments?: string
      /**
       * @description The id of the user who created the contact
       * @example JD000001
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
      /**
       * @description The id of the user who last updated the contact address
       * @example JD000001
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact address was last updated
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime?: string
    }
    /** @description Request to update an address-specific phone number via sync */
    SyncUpdateContactAddressPhoneRequest: {
      /**
       * @description Type of phone
       * @example MOB
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
      /**
       * @description The username of the person who made the update
       * @example JD000001
       */
      updatedBy: string
      /**
       * Format: date-time
       * @description The time when the update was made
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime: string
    }
    /** @description An address-specific phone number used in sync */
    SyncContactAddressPhone: {
      /**
       * Format: int64
       * @description Unique identifier for the address-specific phone number
       * @example 1
       */
      contactAddressPhoneId: number
      /**
       * Format: int64
       * @description Unique identifier for the address to which this phone number is linked
       * @example 1
       */
      contactAddressId: number
      /**
       * Format: int64
       * @description Unique identifier for the phone record
       * @example 1
       */
      contactPhoneId: number
      /**
       * Format: int64
       * @description Unique identifier for the contact linked to this address
       * @example 1
       */
      contactId: number
      /**
       * @description Type of phone
       * @example MOB
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
      /**
       * @description User who updated the entry
       * @example admin2
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was updated
       * @example 2023-09-24T12:00:00
       */
      updatedTime?: string
    }
    /** @description Request to update prisoner number of children */
    CreateOrUpdatePrisonerNumberOfChildrenRequest: {
      /**
       * Format: int32
       * @description The number of children
       * @example 1
       */
      numberOfChildren?: number
    }
    /** @description Response object containing prisoner number of children information */
    PrisonerNumberOfChildrenResponse: {
      /**
       * Format: int64
       * @description The unique identifier of the number of children
       * @example 1
       */
      id: number
      /** @description The number of children of the prisoner */
      numberOfChildren?: string
      /** @description Is this the active number of children of the prisoner */
      active: boolean
      /**
       * Format: date-time
       * @description Creation date and time
       */
      createdTime?: string
      /** @description Username of the creator */
      createdBy?: string
    }
    /** @description Request to create or update prisoner domestic status */
    CreateOrUpdatePrisonerDomesticStatusRequest: {
      /**
       * @description The domestic status code for DOMESTIC_STS group code
       * @example M
       */
      domesticStatusCode?: string
    }
    /** @description Response object containing prisoner domestic status information */
    PrisonerDomesticStatusResponse: {
      /**
       * Format: int64
       * @description The unique identifier of the domestic status
       * @example 1
       */
      id: number
      /** @description The domestic status code of the prisoner */
      domesticStatusCode?: string
      /** @description The domestic status description of the prisoner */
      domesticStatusDescription?: string
      /** @description Is this the active domestic status code of the prisoner */
      active: boolean
      /**
       * Format: date-time
       * @description Creation date and time
       */
      createdTime?: string
      /** @description Username of the creator */
      createdBy?: string
    }
    /** @description Request to update an existing new restriction between a prisoner and a contact */
    UpdatePrisonerContactRestrictionRequest: {
      /**
       * @description
       *         The coded type of restriction that applies to this relationship.
       *         This is a coded value from the group RESTRICTION in reference codes.
       *         Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.
       *
       * @example BAN
       */
      restrictionType: string
      /**
       * Format: date
       * @description Restriction start date
       * @example 2024-01-01
       */
      startDate: string
      /**
       * Format: date
       * @description Restriction end date
       * @example 2024-01-01
       */
      expiryDate?: string
      /**
       * @description Comments for the restriction
       * @example N/A
       */
      comments?: string
    }
    /** @description Restriction related to a prisoner and contacts relationship */
    PrisonerContactRestrictionDetails: {
      /**
       * Format: int64
       * @description The unique identifier for the prisoner contact restriction
       * @example 123456
       */
      prisonerContactRestrictionId: number
      /**
       * Format: int64
       * @description The unique identifier for the prisoner contact
       * @example 123456
       */
      prisonerContactId: number
      /**
       * Format: int64
       * @description The unique identifier for the contact
       * @example 123456
       */
      contactId: number
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description
       *         The coded type of restriction that applies to this relationship.
       *         This is a coded value from the group RESTRICTION in reference codes.
       *         Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.
       *
       * @example BAN
       */
      restrictionType: string
      /**
       * @description The description of restrictionType
       * @example Banned
       */
      restrictionTypeDescription: string
      /**
       * Format: date
       * @description Restriction created date
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description Restriction end date
       * @example 2024-01-01
       */
      expiryDate?: string
      /**
       * @description Comments for the restriction
       * @example N/A
       */
      comments?: string
      /**
       * @description The username of either the person who created the restriction or the last person to update it if it has been modified.
       * @example admin
       */
      enteredByUsername: string
      /**
       * @description The display name of either the person who created the restriction or the last person to update it if it has been modified.
       * @example John Smith
       */
      enteredByDisplayName: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
      /**
       * @description User who updated the entry
       * @example admin2
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was updated
       * @example 2023-09-24T12:00:00
       */
      updatedTime?: string
    }
    /** @description Request to update an existing global restriction on a contact, a.k.a an estate-wide restriction */
    UpdateContactRestrictionRequest: {
      /**
       * @description
       *         The coded type of restriction that applies to this contact.
       *         This is a coded value from the group RESTRICTION in reference codes.
       *         Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.
       *
       * @example BAN
       */
      restrictionType: string
      /**
       * Format: date
       * @description Restriction start date
       * @example 2024-01-01
       */
      startDate: string
      /**
       * Format: date
       * @description Restriction end date
       * @example 2024-01-01
       */
      expiryDate?: string
      /**
       * @description Comments for the restriction
       * @example N/A
       */
      comments?: string
    }
    /** @description Global restriction related to a contact, a.k.a estate-wide restrictions */
    ContactRestrictionDetails: {
      /**
       * Format: int64
       * @description Unique identifier for the contact restriction
       * @example 1
       */
      contactRestrictionId: number
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description
       *         The coded type of restriction that applies to this contact.
       *         This is a coded value from the group RESTRICTION in reference codes.
       *         Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.
       *
       * @example BAN
       */
      restrictionType: string
      /**
       * @description The description of restrictionType
       * @example Banned
       */
      restrictionTypeDescription: string
      /**
       * Format: date
       * @description Restriction created date
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description Restriction end date
       * @example 2024-01-01
       */
      expiryDate?: string
      /**
       * @description Comments for the restriction
       * @example N/A
       */
      comments?: string
      /**
       * @description The username of either the person who created the restriction or the last person to update it if it has been modified.
       * @example admin
       */
      enteredByUsername: string
      /**
       * @description The display name of either the person who created the restriction or the last person to update it if it has been modified.
       * @example John Smith
       */
      enteredByDisplayName: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
      /**
       * @description User who updated the entry
       * @example admin2
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was updated
       * @example 2023-09-24T12:00:00
       */
      updatedTime?: string
    }
    /** @description Request to update an existing phone number */
    UpdatePhoneRequest: {
      /**
       * @description Type of phone
       * @example MOB
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
    }
    /** @description A phone number related to a contact with descriptions of all reference data */
    ContactPhoneDetails: {
      /**
       * Format: int64
       * @description Unique identifier for the contact phone
       * @example 1
       */
      contactPhoneId: number
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of phone
       * @example MOB
       */
      phoneType: string
      /**
       * @description Description of the type of phone
       * @example Mobile
       */
      phoneTypeDescription: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
      /**
       * @description User who updated the entry
       * @example admin2
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was updated
       * @example 2023-09-24T12:00:00
       */
      updatedTime?: string
    }
    /** @description Request to update an existing contact identity */
    UpdateIdentityRequest: {
      /**
       * @description Type of identity
       * @example DL
       */
      identityType: string
      /**
       * @description The identity value such as driving licence number
       * @example DL123456789
       */
      identityValue: string
      /**
       * @description The authority who issued the identity
       * @example DVLA
       */
      issuingAuthority?: string
    }
    /** @description Identity related to a contact */
    ContactIdentityDetails: {
      /**
       * Format: int64
       * @description Unique identifier for the contact identity
       * @example 1
       */
      contactIdentityId: number
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of identity
       * @example PASS
       */
      identityType?: string
      /**
       * @description Description of the type of identity
       * @example Passport number
       */
      identityTypeDescription?: string
      /**
       * @description Whether this type of identity is still active. If not active, the identity cannot be updated.
       * @example true
       */
      identityTypeIsActive: boolean
      /**
       * @description Identity
       * @example GB123456789
       */
      identityValue?: string
      /**
       * @description The authority who issued the identity
       * @example UK Passport Office
       */
      issuingAuthority?: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
      /**
       * @description User who updated the entry
       * @example admin2
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was updated
       * @example 2023-09-24T12:00:00
       */
      updatedTime?: string
    }
    /** @description Request to update an existing employment's employer or active flag. */
    UpdateEmploymentRequest: {
      /**
       * Format: int64
       * @description The organisation id
       * @example 123456789
       */
      organisationId: number
      /** @description Whether this is a current employment or not */
      isActive: boolean
    }
    /** @description The details of an employment for a contact including a summary of the employing organisation. */
    EmploymentDetails: {
      /**
       * Format: int64
       * @description The id for this employment
       * @example 123456
       */
      employmentId: number
      /**
       * Format: int64
       * @description This id for this contact
       * @example 654321
       */
      contactId: number
      /** @description A summary of the employing organisation */
      employer: components['schemas']['OrganisationSummary']
      /** @description Whether this is a current employment or not */
      isActive: boolean
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
      /**
       * @description User who updated the entry
       * @example admin2
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was updated
       * @example 2023-09-24T12:00:00
       */
      updatedTime?: string
    }
    OrganisationSummary: {
      /** Format: int64 */
      organisationId: number
      organisationName: string
      organisationActive: boolean
      flat?: string
      property?: string
      street?: string
      area?: string
      cityCode?: string
      cityDescription?: string
      countyCode?: string
      countyDescription?: string
      postcode?: string
      countryCode?: string
      countryDescription?: string
      businessPhoneNumber?: string
      businessPhoneNumberExtension?: string
    }
    /** @description Request to update an email address */
    UpdateEmailRequest: {
      /**
       * @description Email address
       * @example test@example.com
       */
      emailAddress: string
    }
    /** @description Email related to a contact */
    ContactEmailDetails: {
      /**
       * Format: int64
       * @description Unique identifier for the contact email
       * @example 1
       */
      contactEmailId: number
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Email address
       * @example test@example.com
       */
      emailAddress: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
      /**
       * @description User who updated the entry
       * @example admin2
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was updated
       * @example 2023-09-24T12:00:00
       */
      updatedTime?: string
    }
    /** @description Request to update a contact address */
    UpdateContactAddressRequest: {
      /**
       * @description
       *         The type of address.
       *         This is a coded value (from the group code ADDRESS_TYPE in reference data).
       *         The known values are HOME, WORK or BUS (business address).
       *
       * @example HOME
       */
      addressType?: string
      /**
       * @description True if this is the primary address otherwise false
       * @example true
       */
      primaryAddress: boolean
      /**
       * @description Flat number or name
       * @example Flat 2B
       */
      flat?: string
      /**
       * @description Building or house number or name
       * @example Mansion House
       */
      property?: string
      /**
       * @description Street or road name
       * @example Acacia Avenue
       */
      street?: string
      /**
       * @description Area
       * @example Morton Heights
       */
      area?: string
      /**
       * @description City code - from NOMIS reference data
       * @example BIRM
       */
      cityCode?: string
      /**
       * @description County code - from NOMIS reference data
       * @example WMIDS
       */
      countyCode?: string
      /**
       * @description Postcode
       * @example S13 4FH
       */
      postcode?: string
      /**
       * @description Country code - from NOMIS reference data
       * @example UK
       */
      countryCode: string
      /**
       * @description Whether the address has been verified by postcode lookup
       * @example false
       */
      verified: boolean
      /**
       * @description Whether the address can be used for mailing
       * @example false
       */
      mailFlag?: boolean
      /**
       * Format: date
       * @description The start date when this address can be considered active from
       * @example 2023-01-12
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date when this address can be considered active until
       * @example 2023-01-12
       */
      endDate?: string
      /**
       * @description Flag to indicate this address should be considered as no fixed address
       * @example false
       */
      noFixedAddress?: boolean
      /**
       * @description Any additional information or comments about the address
       * @example Some additional information
       */
      comments?: string
    }
    /** @description A contact address response */
    ContactAddressResponse: {
      /**
       * Format: int64
       * @description The id of the contact address
       * @example 123456
       */
      contactAddressId: number
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      contactId: number
      /** @description The IDs of the contact's address phone numbers */
      phoneNumberIds: number[]
      /**
       * @description
       *           The type of address (optional).
       *           This is a coded value (from the group code ADDRESS_TYPE in reference data).
       *           The known values are HOME, WORK or BUS (business address).
       *
       * @example HOME
       */
      addressType?: string
      /**
       * @description True if this is the primary address otherwise false
       * @example true
       */
      primaryAddress: boolean
      /**
       * @description Flat number or name
       * @example Flat 2B
       */
      flat?: string
      /**
       * @description Building or house number or name
       * @example Mansion House
       */
      property?: string
      /**
       * @description Street or road name
       * @example Acacia Avenue
       */
      street?: string
      /**
       * @description Area
       * @example Morton Heights
       */
      area?: string
      /**
       * @description City code
       * @example 25343
       */
      cityCode?: string
      /**
       * @description County code
       * @example S.YORKSHIRE
       */
      countyCode?: string
      /**
       * @description Postcode
       * @example S13 4FH
       */
      postcode?: string
      /**
       * @description Country code
       * @example ENG
       */
      countryCode?: string
      /**
       * @description Whether the address has been verified by postcode lookup
       * @example false
       */
      verified: boolean
      /**
       * @description Which username ran the postcode lookup check
       * @example NJKG44D
       */
      verifiedBy?: string
      /**
       * Format: date-time
       * @description The timestamp of when the postcode lookup was done
       * @example 2024-01-01T00:00:00Z
       */
      verifiedTime?: string
      /**
       * @description Flag to indicate whether mail is allowed to be sent to this address
       * @example false
       */
      mailFlag: boolean
      /**
       * Format: date
       * @description The start date when this address is to be considered active from
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date when this address is to be considered no longer active
       * @example 2024-01-01
       */
      endDate?: string
      /**
       * @description Flag to indicate whether this address indicates no fixed address
       * @example false
       */
      noFixedAddress: boolean
      /**
       * @description Any additional information or comments about the address
       * @example Some additional information
       */
      comments?: string
      /**
       * @description The id of the user who created the contact
       * @example JD000001
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
      /**
       * @description The id of the user who last updated the contact address
       * @example JD000001
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact address was last updated
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime?: string
    }
    /** @description Request to update an address-specific phone number */
    UpdateContactAddressPhoneRequest: {
      /**
       * @description Type of phone
       * @example MOB
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
    }
    /** @description An address-specific phone number */
    ContactAddressPhoneDetails: {
      /**
       * Format: int64
       * @description Unique identifier for the address-specific phone number
       * @example 1
       */
      contactAddressPhoneId: number
      /**
       * Format: int64
       * @description Unique identifier for the phone number
       * @example 1
       */
      contactPhoneId: number
      /**
       * Format: int64
       * @description Unique identifier for the linked address
       * @example 1
       */
      contactAddressId: number
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of phone code
       * @example MOB
       */
      phoneType: string
      /**
       * @description Type of phone description
       * @example Mobile phone
       */
      phoneTypeDescription: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
      /**
       * @description User who updated the entry
       * @example admin2
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was updated
       * @example 2023-09-24T12:00:00
       */
      updatedTime?: string
    }
    /** @description Request to create a prisoner restriction */
    SyncCreatePrisonerRestrictionRequest: {
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description The restriction type
       * @example NO_VISIT
       */
      restrictionType: string
      /**
       * Format: date
       * @description Effective date of the restriction
       * @example 2024-06-11
       */
      effectiveDate: string
      /**
       * Format: date
       * @description Expiry date of the restriction
       * @example 2024-12-31
       */
      expiryDate?: string
      /**
       * @description True if this restriction applies to the latest or current term in prison, false if a previous term
       * @example true
       */
      currentTerm: boolean
      /**
       * @description Comment text
       * @example No visits allowed
       */
      commentText?: string
      /**
       * @description Authorised staff user name
       * @example JSMITH
       */
      authorisedUsername: string
      /**
       * @description Username of the person who created the record
       * @example JSMITH_ADM
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the record was created
       */
      createdTime: string
    }
    /** @description Request object to create a prisoner contact details */
    SyncCreatePrisonerContactRequest: {
      /**
       * Format: int64
       * @description The ID of the prisoner contact
       * @example 12345
       */
      contactId: number
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description
       *           Coded value indicating either a social or official contact (mandatory).
       *           This is a coded value (from the group code CONTACT_TYPE in reference data).
       *           Known values are (S) Social or (O) official.
       *
       * @example S
       */
      contactType: string
      /**
       * @description The type of relationship
       * @example Friend
       */
      relationshipType: string
      /**
       * @description Indicates if the prisoner contact is next of kin
       * @example true
       */
      nextOfKin: boolean
      /**
       * @description Indicates if the prisoner contact is an emergency contact
       * @example true
       */
      emergencyContact: boolean
      /**
       * @description Additional comments about the prisoner contact
       * @example Close family friend
       */
      comments?: string
      /**
       * @description The user who created the prisoner contact
       * @example system
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp when the prisoner contact was created
       * @example 2024-01-01T12:00:00
       */
      createdTime: string
      /**
       * @description Indicates if the prisoner contact is active
       * @example true
       */
      active?: boolean
      /**
       * @description Indicates if the prisoner contact is an approved visitor
       * @example false
       */
      approvedVisitor?: boolean
      /**
       * @description Indicates if this relationship is current and applies to the latest booking
       * @example true
       */
      currentTerm?: boolean
      /**
       * Format: date
       * @description The expiry date of the prisoner contact
       * @example 2025-01-01
       */
      expiryDate?: string
      /**
       * @description The prison where the prisoner contact was created
       * @example HMP Belmarsh
       */
      createdAtPrison?: string
    }
    /** @description Request object to create a prisoner contact restriction */
    SyncCreatePrisonerContactRestrictionRequest: {
      /**
       * Format: int64
       * @description ID of the prisoner contact (relationship) on which the restriction applies
       * @example 12345
       */
      prisonerContactId: number
      /**
       * @description Type of restriction applied
       * @example NoContact
       */
      restrictionType: string
      /**
       * Format: date
       * @description Start date of the restriction
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description Expiry date of the restriction, if applicable
       * @example 2024-12-31
       */
      expiryDate?: string
      /**
       * @description Comments regarding the restriction
       * @example Restriction applied due to safety concerns
       */
      comments?: string
      /**
       * @description User who created the restriction record
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Time when the restriction record was created
       * @example 2024-10-01T12:00:00Z
       */
      createdTime: string
    }
    /** @description Request object for creating a new employment record */
    SyncCreateEmploymentRequest: {
      /**
       * Format: int64
       * @description The ID of the organization associated with the employment
       * @example 12345
       */
      organisationId: number
      /**
       * Format: int64
       * @description The ID of the contact associated with the employment
       * @example 67890
       */
      contactId: number
      /**
       * @description If the employment is active
       * @example true
       */
      active: boolean
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
    }
    ContactRelationship: {
      /**
       * @description Prisoner number (NOMS ID)
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description The relationship between the prisoner and the contact - for social(S) or official(O)
       * @example S
       */
      relationshipTypeCode: string
      /**
       * @description The relationship to the prisoner. A code from SOCIAL_RELATIONSHIP or OFFICIAL_RELATIONSHIP reference data groups depending on the relationship type.
       * @example FRI
       */
      relationshipToPrisonerCode: string
      /**
       * @description Whether they are the next of kin for the prisoner
       * @example true
       */
      isNextOfKin: boolean
      /**
       * @description Whether they are the emergency contact for the prisoner
       * @example true
       */
      isEmergencyContact: boolean
      /**
       * @description Is this a approved visitor for the prisoner?
       * @example true
       */
      isApprovedVisitor: boolean
      /**
       * @description Comments about the contacts relationship with the prisoner
       * @example Some additional information
       */
      comments?: string
    }
    /** @description Request to create a new contact */
    SyncCreateContactRequest: {
      /**
       * Format: int64
       * @description The person ID from NOMIS
       * @example 1233323
       */
      personId: number
      /**
       * @description
       *           The title code for the contact.
       *           This is a coded value (from the group code TITLE in reference data).
       *           Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.
       *
       * @example MR
       */
      title?: string
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleName?: string
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /** @description A description of the relationship if the contact should be linked to a prisoner */
      relationship?: components['schemas']['ContactRelationship']
      /**
       * @description Whether the contact is a staff member
       * @example false
       */
      isStaff: boolean
      /**
       * @description Whether the contact is a remitter
       * @example false
       */
      remitter: boolean
      /**
       * @description Whether the contact is deceased
       * @example false
       */
      deceasedFlag?: boolean
      /**
       * Format: date
       * @description The date the contact was deceased, if applicable
       * @example 2023-05-01
       */
      deceasedDate?: string
      /**
       * @description
       *         The gender code for the contact.
       *         This is a coded value (from the group code GENDER in reference data).
       *         Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.
       *
       * @example M
       */
      gender?: string
      /**
       * @description The domestic status code of the contact
       * @example S
       */
      domesticStatus?: string
      /**
       * @description The language code of the contact
       * @example EN
       */
      languageCode?: string
      /**
       * @description Whether an interpreter is required
       * @example false
       */
      interpreterRequired?: boolean
      /**
       * @description The id of the user creating the contact
       * @example JD000001
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
      staff?: boolean
    }
    /** @description Request to create a new contact restriction  */
    SyncCreateContactRestrictionRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of restriction
       * @example MOBILE
       */
      restrictionType: string
      /**
       * Format: date
       * @description Restriction start date
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description Restriction end date
       * @example 2024-01-01
       */
      expiryDate?: string
      /**
       * @description Comments for the restriction
       * @example N/A
       */
      comments?: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the restriction was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
    }
    /** @description Request to create a new contact phone number for sync API */
    SyncCreateContactPhoneRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of phone
       * @example MOB
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the phone was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
    }
    /** @description Request to create a new contact identity  */
    SyncCreateContactIdentityRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Type of identity
       * @example DL
       */
      identityType: string
      /**
       * @description Identity number or reference
       * @example HP9909SM1883
       */
      identityValue: string
      /**
       * @description Issuing authority
       * @example DVLA
       */
      issuingAuthority?: string
      /**
       * @description User who created the entry
       * @example JJ99821
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the identity was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
    }
    /** @description Request to create a new contact email address by sync with NOMIS */
    SyncCreateContactEmailRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact
       * @example 123
       */
      contactId: number
      /**
       * @description Email address
       * @example test@example.com
       */
      emailAddress: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the email was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
    }
    /** @description Request to create a new contact address */
    SyncCreateContactAddressRequest: {
      /**
       * Format: int64
       * @description The id of the contact this address is linked with
       * @example 123456
       */
      contactId: number
      /**
       * @description
       *           The type of address.
       *           This is a coded value (from the group code ADDRESS_TYPE in reference data).
       *           The known values are HOME, WORK or BUS (business address).
       *
       * @example HOME
       */
      addressType?: string
      /**
       * @description True if this is the primary address otherwise false
       * @example true
       */
      primaryAddress: boolean
      /**
       * @description Flat number or name
       * @example Flat 2B
       */
      flat?: string
      /**
       * @description Building or house number or name
       * @example Mansion House
       */
      property?: string
      /**
       * @description Street or road name
       * @example Acacia Avenue
       */
      street?: string
      /**
       * @description Area
       * @example Morton Heights
       */
      area?: string
      /**
       * @description City code - from NOMIS
       * @example 13232
       */
      cityCode?: string
      /**
       * @description County code - from NOMIS
       * @example WMIDS
       */
      countyCode?: string
      /**
       * @description Postcode
       * @example S13 4FH
       */
      postcode?: string
      /**
       * @description Country code - from NOMIS
       * @example UK
       */
      countryCode?: string
      /**
       * @description Whether the address has been verified by postcode lookup
       * @example false
       */
      verified?: boolean
      /**
       * @description Whether the address can be used for mailing
       * @example false
       */
      mailFlag?: boolean
      /**
       * Format: date
       * @description The start date when this address can be considered active from
       * @example 2023-01-12
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date when this address can be considered active until
       * @example 2023-01-12
       */
      endDate?: string
      /**
       * @description Flag to indicate this address should be considered as no fixed address
       * @example false
       */
      noFixedAddress?: boolean
      /**
       * @description Any additional information or comments about the address
       * @example Some additional information
       */
      comments?: string
      /**
       * @description The id of the user who created the contact
       * @example JD000001
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
    }
    /** @description Request to create a new address-linked phone number via sync */
    SyncCreateContactAddressPhoneRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact address
       * @example 123
       */
      contactAddressId: number
      /**
       * @description Type of phone
       * @example MOB
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the phone was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
    }
    CodedValue: {
      /**
       * @description A coded value from NOMIS reference data
       * @example CODE
       */
      code: string
      /**
       * @description The description for this coded value in NOMIS
       * @example Description
       */
      description: string
    }
    /** @description The request to remove and replace relationships and relationship restrictions for a prisoner */
    ResetPrisonerContactRequest: {
      /** @description The prisoner number to reset relationships for */
      prisonerNumber: string
      /** @description The list of relationships to create in place of the existing */
      prisonerContacts: components['schemas']['SyncPrisonerRelationship'][]
    }
    /** @description A single prisoner relationship */
    SyncPrisonerRelationship: {
      /**
       * Format: int64
       * @description The ID for this relationship in NOMIS
       * @example 123
       */
      id: number
      /**
       * Format: int64
       * @description The contactId which this relationship is with
       */
      contactId: number
      /**
       * @description
       *           Coded value indicating either a social or official contact (mandatory).
       *           This is a coded value (from the group code CONTACT_TYPE in reference data).
       *           Known values are (S) Social or (O) official.
       *
       * @example S
       */
      contactType: components['schemas']['CodedValue']
      /** @description Coded value indicating the type of relationship - from reference data */
      relationshipType: components['schemas']['CodedValue']
      /**
       * @description True if this relationship applies to the latest or current term in prison, false if a previous term
       * @example true
       */
      currentTerm: boolean
      /**
       * @description The relationship is active
       * @example true
       */
      active: boolean
      /**
       * Format: date
       * @description The date that this relationship expired
       * @example 2024-03-01
       */
      expiryDate?: string
      /**
       * @description Approved visitor
       * @example true
       */
      approvedVisitor: boolean
      /**
       * @description Next of kin
       * @example true
       */
      nextOfKin: boolean
      /**
       * @description Emergency contact
       * @example true
       */
      emergencyContact: boolean
      /**
       * @description Comment on this relationship
       * @example This is an optional comment
       */
      comment?: string
      /**
       * @description The prisoner number (NOMS ID) related
       * @example A1234AA
       */
      prisonerNumber: string
      /** @description The restrictions for this prisoner contact relationship */
      restrictions: components['schemas']['SyncRelationshipRestriction'][]
      /**
       * Format: date-time
       * @description The data and time the record was created
       * @example 2022-10-01T16:45:45
       */
      createDateTime?: string
      /**
       * @description The username who created the row
       * @example X999X
       */
      createUsername?: string
      /**
       * Format: date-time
       * @description The date and time the record was last amended
       * @example 2022-10-01T16:45:45
       */
      modifyDateTime?: string
      /**
       * @description The username who last modified the row
       * @example X999X
       */
      modifyUsername?: string
    }
    SyncRelationshipRestriction: {
      /**
       * Format: int64
       * @description The ID of this restriction in NOMIS
       * @example 123
       */
      id: number
      /** @description Coded value indicating the restriction type from reference data */
      restrictionType: components['schemas']['CodedValue']
      /**
       * @description Comment on this restriction
       * @example Comment on restriction
       */
      comment?: string
      /**
       * Format: date
       * @description The date that this restriction took effect
       * @example 2024-03-01
       */
      startDate: string
      /**
       * Format: date
       * @description The date that this restriction expires
       * @example 2024-03-01
       */
      expiryDate?: string
      /**
       * Format: date-time
       * @description The data and time the record was created
       * @example 2022-10-01T16:45:45
       */
      createDateTime?: string
      /**
       * @description The username who created the row
       * @example X999X
       */
      createUsername?: string
      /**
       * Format: date-time
       * @description The date and time the record was last amended
       * @example 2022-10-01T16:45:45
       */
      modifyDateTime?: string
      /**
       * @description The username who last modified the row
       * @example X999X
       */
      modifyUsername?: string
    }
    IdPair: {
      /**
       * @description The category of information returned
       * @example PHONE
       * @enum {string}
       */
      elementType:
        | 'CONTACT'
        | 'PHONE'
        | 'EMAIL'
        | 'ADDRESS'
        | 'ADDRESS_PHONE'
        | 'IDENTITY'
        | 'RESTRICTION'
        | 'PRISONER_CONTACT'
        | 'PRISONER_CONTACT_RESTRICTION'
        | 'EMPLOYMENT'
        | 'ORGANISATION'
        | 'WEB_ADDRESS'
      /**
       * Format: int64
       * @description The unique ID for this piece of data provided in the request
       * @example 123435
       */
      nomisId: number
      /**
       * Format: int64
       * @description The unique ID created in the DPS contacts service
       * @example 1234
       */
      dpsId: number
    }
    /** @description Contains the IDs of the contact, relationships and restrictions created during a prisoner merge */
    PrisonerContactAndRestrictionIds: {
      /**
       * Format: int64
       * @description The contactId that this relationship is with
       */
      contactId: number
      /** @description The unique IDs in NOMIS and DPS for this relationship or prisoner contact */
      relationship: components['schemas']['IdPair']
      /** @description The pairs of IDs in NOMIS and DPS for relationship-specific restrictions */
      restrictions: components['schemas']['IdPair'][]
    }
    /** @description Contains the details of the relationships and restrictions removed during a prisoner merge */
    PrisonerRelationshipIds: {
      /**
       * @description The prisoner number in NOMIS
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The ID of the contact this relationship is with
       * @example 12345
       */
      contactId: number
      /**
       * Format: int64
       * @description The ID of relationship
       * @example 12345
       */
      prisonerContactId: number
      /**
       * @description A list of relationship restriction IDs
       * @example [
       *       1234,
       *       2345,
       *       3456
       *     ]
       */
      prisonerContactRestrictionIds: number[]
    }
    /** @description The response object for a reset of relationships for a prisoner */
    ResetPrisonerContactResponse: {
      relationshipsCreated: components['schemas']['PrisonerContactAndRestrictionIds'][]
      relationshipsRemoved: components['schemas']['PrisonerRelationshipIds'][]
    }
    /** @description The request to replace the relationships for a prisoner */
    MergePrisonerContactRequest: {
      /** @description The prisoner number that was retained in NOMIS */
      retainedPrisonerNumber: string
      /** @description The list of relationships to create */
      prisonerContacts: components['schemas']['SyncPrisonerRelationship'][]
      /** @description The prisoner number that was removed from NOMIS */
      removedPrisonerNumber: string
    }
    /** @description The response object for a prisoner merge request */
    MergePrisonerContactResponse: {
      relationshipsCreated: components['schemas']['PrisonerContactAndRestrictionIds'][]
      relationshipsRemoved: components['schemas']['PrisonerRelationshipIds'][]
    }
    AddContactRelationshipRequest: {
      /**
       * Format: int64
       * @description The id of the contact this relationship is for
       * @example 123456
       */
      contactId: number
      /** @description A description of the contacts relationship to a prisoner */
      relationship: components['schemas']['ContactRelationship']
    }
    /** @description Describes the prisoner contact relationship */
    PrisonerContactRelationshipDetails: {
      /**
       * Format: int64
       * @description The unique identifier for the prisoner contact
       * @example 123456
       */
      prisonerContactId: number
      /**
       * Format: int64
       * @description The unique identifier for the contact
       * @example 654321
       */
      contactId: number
      /**
       * @description Prisoner number (NOMS ID)
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description
       *           Coded value indicating either a social or official contact (mandatory).
       *           This is a coded value from the group code CONTACT_TYPE in reference data.
       *           Known values are (S) Social or (O) official.
       *
       * @example S
       */
      relationshipTypeCode: string
      /**
       * @description The description of the contact relationship type. Description from reference data Official or Social
       * @example Official
       */
      relationshipTypeDescription: string
      /**
       * @description The relationship to the prisoner. A code from SOCIAL_RELATIONSHIP or OFFICIAL_RELATIONSHIP reference data groups depending on the relationship type.
       * @example FRI
       */
      relationshipToPrisonerCode: string
      /**
       * @description The description of the relationship
       * @example Friend
       */
      relationshipToPrisonerDescription: string
      /**
       * @description Is this contact the prisoner's emergency contact?
       * @example true
       */
      isEmergencyContact: boolean
      /**
       * @description Is this contact the prisoner's next of kin?
       * @example false
       */
      isNextOfKin: boolean
      /**
       * @description Is this a approved visitor for the prisoner?
       * @example true
       */
      isApprovedVisitor: boolean
      /**
       * @description Is this prisoner's contact relationship active?
       * @example true
       */
      isRelationshipActive: boolean
      /**
       * @description Any additional comments
       * @example Close family friend
       */
      comments?: string
    }
    /** @description Request to create a new restriction between a prisoner and a contact */
    CreatePrisonerContactRestrictionRequest: {
      /**
       * @description
       *         The coded type of restriction that applies to this relationship.
       *         This is a coded value from the group RESTRICTION in reference codes.
       *         Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.
       *
       * @example BAN
       */
      restrictionType: string
      /**
       * Format: date
       * @description Restriction start date
       * @example 2024-01-01
       */
      startDate: string
      /**
       * Format: date
       * @description Restriction end date
       * @example 2024-01-01
       */
      expiryDate?: string
      /**
       * @description Comments for the restriction
       * @example N/A
       */
      comments?: string
    }
    /** @description Request to migrate a prisoner's restrictions */
    MigratePrisonerRestrictionsRequest: {
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /** @description Restriction records */
      restrictions: components['schemas']['PrisonerRestrictionDetailsRequest'][]
    }
    /** @description Details of a prisoner restriction record */
    PrisonerRestrictionDetailsRequest: {
      /**
       * @description The restriction type
       * @example NO_VISIT
       */
      restrictionType: string
      /**
       * Format: date
       * @description Effective date of the restriction
       * @example 2024-06-11
       */
      effectiveDate: string
      /**
       * Format: date
       * @description Expiry date of the restriction
       * @example 2024-12-31
       */
      expiryDate?: string
      /**
       * @description Comment text
       * @example No visits allowed
       */
      commentText?: string
      /**
       * @description Authorised staff user name
       * @example JSMITH
       */
      authorisedUsername: string
      /**
       * @description True if this restriction applies to the latest or current term in prison, false if a previous term
       * @example true
       */
      currentTerm: boolean
      /**
       * @description Username of the person who created the record
       * @example JSMITH_ADM
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the record was created
       */
      createdTime: string
      /**
       * @description Username of the person who last updated the record
       * @example JDOE_ADM
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the record was last updated
       */
      updatedTime?: string
    }
    /** @description Response after migrating prisoner restrictions */
    PrisonerRestrictionsMigrationResponse: {
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /** @description IDs of the migrated restriction records */
      prisonerRestrictionsIds: number[]
    }
    /** @description Request to migrate a prisoner's number of children */
    MigratePrisonerNumberOfChildrenRequest: {
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /** @description Current number of children details */
      current?: components['schemas']['NumberOfChildrenDetailsRequest']
      /** @description Historical number of children records */
      history: components['schemas']['NumberOfChildrenDetailsRequest'][]
    }
    /** @description Details of a number of children record */
    NumberOfChildrenDetailsRequest: {
      /**
       * @description The number of children
       * @example 1
       */
      numberOfChildren?: string
      /**
       * @description Username of the person who created the record
       * @example JSMITH_ADM
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the record was created
       */
      createdTime: string
    }
    /** @description Response object for prisoner's number of children migration */
    PrisonerNumberOfChildrenMigrationResponse: {
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The current number of children
       */
      current?: number
      /** @description Historical number of children records */
      history: number[]
    }
    /** @description Details of a domestic status record */
    DomesticStatusDetailsRequest: {
      /**
       * @description The domestic status code
       * @example M
       */
      domesticStatusCode?: string
      /**
       * @description Username of the person who created the record
       * @example JSMITH_ADM
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the record was created
       */
      createdTime: string
    }
    /** @description Request to migrate a prisoner's domestic status */
    MigratePrisonerDomesticStatusRequest: {
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /** @description Current domestic status details */
      current?: components['schemas']['DomesticStatusDetailsRequest']
      /** @description Historical domestic status records */
      history: components['schemas']['DomesticStatusDetailsRequest'][]
    }
    /** @description Response object for prisoner's domestic status migration */
    PrisonerDomesticStatusMigrationResponse: {
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The current domestic status
       */
      current?: number
      /** @description Historical domestic status records */
      history: number[]
    }
    Corporate: {
      /**
       * Format: int64
       * @description The corporate ID in NOMIS
       * @example 123
       */
      id: number
    }
    MigrateAddress: {
      /**
       * Format: int64
       * @description Unique address ID in NOMIS
       * @example 123
       */
      addressId: number
      /** @description Address type coded value (from reference data) */
      type?: components['schemas']['CodedValue']
      /**
       * @description Flat number or identifier
       * @example 1B
       */
      flat?: string
      /**
       * @description House name or number
       * @example 43
       */
      premise?: string
      /**
       * @description Street or road
       * @example Main Street
       */
      street?: string
      /**
       * @description Locality
       * @example Keighley
       */
      locality?: string
      /**
       * @description Postcode
       * @example BD12 8RD
       */
      postCode?: string
      /** @description City - code and description (from reference data) */
      city?: components['schemas']['CodedValue']
      /** @description County - code and description (from reference data) */
      county?: components['schemas']['CodedValue']
      /** @description Country - code and description (from reference data) */
      country?: components['schemas']['CodedValue']
      /**
       * @description Address validated by postcode lookup
       * @example false
       */
      validatedPAF: boolean
      /**
       * @description If true this address should be considered as no fixed address
       * @example false
       */
      noFixedAddress: boolean
      /**
       * @description If true this address should be considered as the primary residential address
       * @example true
       */
      primaryAddress: boolean
      /**
       * @description If true this address should be considered for sending mail to
       * @example true
       */
      mailAddress: boolean
      /**
       * @description Comments relating to this address
       * @example A comment
       */
      comment?: string
      /**
       * Format: date
       * @description The date this address should be considered valid from
       * @example 2018-10-01
       */
      startDate?: string
      /**
       * Format: date
       * @description The date this address should be considered valid to
       * @example 2022-04-04
       */
      endDate?: string
      /** @description A list of phone numbers which are linked to this address */
      phoneNumbers: components['schemas']['MigratePhoneNumber'][]
      /**
       * Format: date-time
       * @description The data and time the record was created
       * @example 2022-10-01T16:45:45
       */
      createDateTime?: string
      /**
       * @description The username who created the row
       * @example X999X
       */
      createUsername?: string
      /**
       * Format: date-time
       * @description The date and time the record was last amended
       * @example 2022-10-01T16:45:45
       */
      modifyDateTime?: string
      /**
       * @description The username who last modified the row
       * @example X999X
       */
      modifyUsername?: string
    }
    /** @description Request to migrate a contact and all of its sub-elements from NOMIS into this service */
    MigrateContactRequest: {
      /**
       * Format: int64
       * @description The person ID from NOMIS
       * @example 1233323
       */
      personId: number
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleName?: string
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /** @description The gender of the contact */
      gender?: components['schemas']['CodedValue']
      /** @description The title of the contact, if any */
      title?: components['schemas']['CodedValue']
      /** @description The main language spoken by this contact */
      language?: components['schemas']['CodedValue']
      /** @description Interpreter required */
      interpreterRequired: boolean
      /** @description The domestic status coded value */
      domesticStatus?: components['schemas']['CodedValue']
      /**
       * Format: date
       * @description The date this persons was marked as deceased
       */
      deceasedDate?: string
      /** @description This person is staff */
      staff: boolean
      /** @description This person is a remitter */
      remitter: boolean
      /** @description Telephone numbers */
      phoneNumbers: components['schemas']['MigratePhoneNumber'][]
      /** @description Addresses */
      addresses: components['schemas']['MigrateAddress'][]
      /** @description Email addresses */
      emailAddresses: components['schemas']['MigrateEmailAddress'][]
      /** @description Employments for official contacts only */
      employments: components['schemas']['MigrateEmployment'][]
      /** @description Proofs of identity */
      identifiers: components['schemas']['MigrateIdentifier'][]
      /** @description The relationships with prisoners including specific restrictions for each */
      contacts: components['schemas']['MigrateRelationship'][]
      /** @description The restrictions which apply to this person only */
      restrictions: components['schemas']['MigrateRestriction'][]
      /**
       * Format: date-time
       * @description The data and time the record was created
       * @example 2022-10-01T16:45:45
       */
      createDateTime?: string
      /**
       * @description The username who created the row
       * @example X999X
       */
      createUsername?: string
      /**
       * Format: date-time
       * @description The date and time the record was last amended
       * @example 2022-10-01T16:45:45
       */
      modifyDateTime?: string
      /**
       * @description The username who last modified the row
       * @example X999X
       */
      modifyUsername?: string
    }
    MigrateEmailAddress: {
      /**
       * Format: int64
       * @description Unique email ID in NOMIS
       * @example 123
       */
      emailAddressId: number
      /**
       * @description Email address
       * @example test@example.com
       */
      email: string
      /**
       * Format: date-time
       * @description The data and time the record was created
       * @example 2022-10-01T16:45:45
       */
      createDateTime?: string
      /**
       * @description The username who created the row
       * @example X999X
       */
      createUsername?: string
      /**
       * Format: date-time
       * @description The date and time the record was last amended
       * @example 2022-10-01T16:45:45
       */
      modifyDateTime?: string
      /**
       * @description The username who last modified the row
       * @example X999X
       */
      modifyUsername?: string
    }
    MigrateEmployment: {
      /**
       * Format: int64
       * @description Unique sequence ID in NOMIS for this employment
       * @example 123
       */
      sequence: number
      /** @description The corporate organisation this person works for */
      corporate: components['schemas']['Corporate']
      /**
       * @description Comments relating to this restriction
       * @example true
       */
      active: boolean
      /**
       * Format: date-time
       * @description The data and time the record was created
       * @example 2022-10-01T16:45:45
       */
      createDateTime?: string
      /**
       * @description The username who created the row
       * @example X999X
       */
      createUsername?: string
      /**
       * Format: date-time
       * @description The date and time the record was last amended
       * @example 2022-10-01T16:45:45
       */
      modifyDateTime?: string
      /**
       * @description The username who last modified the row
       * @example X999X
       */
      modifyUsername?: string
    }
    MigrateIdentifier: {
      /**
       * Format: int64
       * @description Unique sequence ID in NOMIS
       * @example 123
       */
      sequence: number
      /** @description Coded value for proof of ID type */
      type: components['schemas']['CodedValue']
      /**
       * @description The identifying information e.g. driving licence number
       * @example KJ 45544 JFKJK
       */
      identifier: string
      /**
       * @description The issuing authority for this identifier
       * @example DVLA
       */
      issuedAuthority?: string
      /**
       * Format: date-time
       * @description The data and time the record was created
       * @example 2022-10-01T16:45:45
       */
      createDateTime?: string
      /**
       * @description The username who created the row
       * @example X999X
       */
      createUsername?: string
      /**
       * Format: date-time
       * @description The date and time the record was last amended
       * @example 2022-10-01T16:45:45
       */
      modifyDateTime?: string
      /**
       * @description The username who last modified the row
       * @example X999X
       */
      modifyUsername?: string
    }
    MigratePhoneNumber: {
      /**
       * Format: int64
       * @description Unique phone ID in NOMIS
       * @example 123
       */
      phoneId: number
      /**
       * @description Telephone number
       * @example 098989 98989893
       */
      number: string
      /**
       * @description Extension number (optional)
       * @example 100
       */
      extension?: string
      /** @description Type of phone number (from reference data) */
      type: components['schemas']['CodedValue']
      /**
       * Format: date-time
       * @description The data and time the record was created
       * @example 2022-10-01T16:45:45
       */
      createDateTime?: string
      /**
       * @description The username who created the row
       * @example X999X
       */
      createUsername?: string
      /**
       * Format: date-time
       * @description The date and time the record was last amended
       * @example 2022-10-01T16:45:45
       */
      modifyDateTime?: string
      /**
       * @description The username who last modified the row
       * @example X999X
       */
      modifyUsername?: string
    }
    MigratePrisonerContactRestriction: {
      /**
       * Format: int64
       * @description The ID in NOMIS
       * @example 123
       */
      id: number
      /** @description Coded value indicating the restriction type from reference data */
      restrictionType: components['schemas']['CodedValue']
      /**
       * @description Comment on this restriction
       * @example Comment on restriction
       */
      comment?: string
      /**
       * Format: date
       * @description The date that this restriction took effect
       * @example 2024-03-01
       */
      startDate: string
      /**
       * Format: date
       * @description The date that this restriction expires
       * @example 2024-03-01
       */
      expiryDate?: string
      /**
       * Format: date-time
       * @description The data and time the record was created
       * @example 2022-10-01T16:45:45
       */
      createDateTime?: string
      /**
       * @description The username who created the row
       * @example X999X
       */
      createUsername?: string
      /**
       * Format: date-time
       * @description The date and time the record was last amended
       * @example 2022-10-01T16:45:45
       */
      modifyDateTime?: string
      /**
       * @description The username who last modified the row
       * @example X999X
       */
      modifyUsername?: string
    }
    MigrateRelationship: {
      /**
       * Format: int64
       * @description The ID in NOMIS
       * @example 123
       */
      id: number
      /**
       * @description
       *         Coded value indicating either a social or official contact (mandatory).
       *         This is a coded value (from the group code CONTACT_TYPE in reference data).
       *         Known values are (S) Social or (O) official.
       *
       * @example S
       */
      contactType: components['schemas']['CodedValue']
      /** @description Coded value indicating the type of relationship - from reference data */
      relationshipType: components['schemas']['CodedValue']
      /**
       * @description True if this relationship applies to the latest or current term in prison, false if a previous term
       * @example true
       */
      currentTerm: boolean
      /**
       * @description The relationship is active
       * @example true
       */
      active: boolean
      /**
       * Format: date
       * @description The date that this relationship expired
       * @example 2024-03-01
       */
      expiryDate?: string
      /**
       * @description Approved visitor
       * @example true
       */
      approvedVisitor: boolean
      /**
       * @description Next of kin
       * @example true
       */
      nextOfKin: boolean
      /**
       * @description Emergency contact
       * @example true
       */
      emergencyContact: boolean
      /**
       * @description Comment on this relationship
       * @example This is an optional comment
       */
      comment?: string
      /**
       * @description The prisoner number (NOMS ID) related
       * @example A1234AA
       */
      prisonerNumber: string
      /** @description The restrictions for this prisoner contact relationship */
      restrictions: components['schemas']['MigratePrisonerContactRestriction'][]
      /**
       * Format: date-time
       * @description The data and time the record was created
       * @example 2022-10-01T16:45:45
       */
      createDateTime?: string
      /**
       * @description The username who created the row
       * @example X999X
       */
      createUsername?: string
      /**
       * Format: date-time
       * @description The date and time the record was last amended
       * @example 2022-10-01T16:45:45
       */
      modifyDateTime?: string
      /**
       * @description The username who last modified the row
       * @example X999X
       */
      modifyUsername?: string
    }
    MigrateRestriction: {
      /**
       * Format: int64
       * @description Unique ID in NOMIS for this restriction
       * @example 123
       */
      id: number
      /** @description Coded value for this restriction type */
      type: components['schemas']['CodedValue']
      /**
       * @description Comments relating to this restriction
       * @example A comment
       */
      comment?: string
      /**
       * Format: date
       * @description The date that this restriction is effective from
       * @example 2024-01-01
       */
      effectiveDate: string
      /**
       * Format: date
       * @description The date that this restriction expires and stops being enforced
       * @example 2024-03-01
       */
      expiryDate?: string
      /**
       * Format: date-time
       * @description The data and time the record was created
       * @example 2022-10-01T16:45:45
       */
      createDateTime?: string
      /**
       * @description The username who created the row
       * @example X999X
       */
      createUsername?: string
      /**
       * Format: date-time
       * @description The date and time the record was last amended
       * @example 2022-10-01T16:45:45
       */
      modifyDateTime?: string
      /**
       * @description The username who last modified the row
       * @example X999X
       */
      modifyUsername?: string
    }
    AddressAndPhones: {
      /** @description The unique IDs in NOMIS and DPS for this address */
      address: components['schemas']['IdPair']
      /** @description The pairs of IDs in NOMIS and DPS for address-specific phone numbers */
      phones: components['schemas']['IdPair'][]
    }
    ContactsAndRestrictions: {
      /** @description The unique IDs in NOMIS and DPS for this relationship */
      relationship: components['schemas']['IdPair']
      /** @description The pairs of IDs in NOMIS and DPS for relationship-specific restrictions */
      restrictions: components['schemas']['IdPair'][]
    }
    /** @description The migration response for a contact/person and all of its sub-entities */
    MigrateContactResponse: {
      /**
       * @description The pair of IDs for this person in NOMIS
       * @example 123456
       */
      contact: components['schemas']['IdPair']
      /**
       * @description The last name of the contact created
       * @example Doe
       */
      lastName: string
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /** @description List of Nomis and DPS IDs for person phone numbers */
      phoneNumbers: components['schemas']['IdPair'][]
      /** @description List of Nomis and DPS IDs for addresses and address-specific phone numbers */
      addresses: components['schemas']['AddressAndPhones'][]
      /** @description List of Nomis and DPS IDs for person email addresses */
      emailAddresses: components['schemas']['IdPair'][]
      /** @description List of Nomis and DPS IDs for person proofs of identity */
      identities: components['schemas']['IdPair'][]
      /** @description List of Nomis and DPS IDs for person restrictions (visitor restrictions) */
      restrictions: components['schemas']['IdPair'][]
      /** @description List of Nomis and DPS IDs for relationships and relationship-specific restrictions */
      relationships: components['schemas']['ContactsAndRestrictions'][]
      /** @description List of Nomis and DPS IDs for employments (official contact types only) */
      employments?: components['schemas']['IdPair'][]
    }
    Address: {
      /**
       * @description
       *           The type of address.
       *           This is a coded value (from the group code ADDRESS_TYPE in reference data).
       *           The known values are HOME, WORK or BUS (business address).
       *
       * @example HOME
       */
      addressType?: string
      /**
       * @description True if this is the primary address otherwise false
       * @example true
       */
      primaryAddress: boolean
      /**
       * @description Flat number or name
       * @example Flat 2B
       */
      flat?: string
      /**
       * @description Building or house number or name
       * @example Mansion House
       */
      property?: string
      /**
       * @description Street or road name
       * @example Acacia Avenue
       */
      street?: string
      /**
       * @description Area
       * @example Morton Heights
       */
      area?: string
      /**
       * @description City code - from NOMIS
       * @example 13232
       */
      cityCode?: string
      /**
       * @description County code - from NOMIS
       * @example WMIDS
       */
      countyCode?: string
      /**
       * @description Postcode
       * @example S13 4FH
       */
      postcode?: string
      /**
       * @description Country code - from NOMIS
       * @example UK
       */
      countryCode: string
      /**
       * @description Whether the address has been verified by postcode lookup
       * @example false
       */
      verified?: boolean
      /**
       * @description Whether the address can be used for mailing
       * @example false
       */
      mailFlag?: boolean
      /**
       * Format: date
       * @description The start date when this address can be considered active from
       * @example 2023-01-12
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date when this address can be considered active until
       * @example 2023-01-12
       */
      endDate?: string
      /**
       * @description Flag to indicate this address should be considered as no fixed address
       * @example false
       */
      noFixedAddress?: boolean
      /** @description Any phone numbers that are specific to this address */
      phoneNumbers: components['schemas']['PhoneNumber'][]
      /**
       * @description Any additional information or comments about the address
       * @example Some additional information
       */
      comments?: string
    }
    /** @description Request to create a new contact */
    CreateContactRequest: {
      /**
       * @description
       *           The title code for the contact.
       *           This is a coded value (from the group code TITLE in reference data).
       *           Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.
       *
       * @example MR
       */
      titleCode?: string
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle names of the contact, if any
       * @example William
       */
      middleNames?: string
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /**
       * @description Whether the contact is a staff member
       * @example false
       */
      isStaff: boolean
      /**
       * @description
       *           The primary language of the contact.
       *           This is a coded value (from the group code LANGUAGE in reference data).
       *
       * @example ENG
       */
      languageCode?: string
      /**
       * @description Whether an interpreter is required for this contact
       * @example true
       */
      interpreterRequired: boolean
      /**
       * @description
       *           The domestic status of the contact.
       *           This is a coded value (from the group code DOMESTIC_STS in reference data).
       *
       * @example S
       */
      domesticStatusCode?: string
      /** @description
       *           The domestic status of the contact.
       *           This is a coded value (from the group code GENDER in reference data).
       *            */
      genderCode?: string
      /** @description A description of the relationship if the contact should be linked to a prisoner */
      relationship?: components['schemas']['ContactRelationship']
      /** @description Identity documents */
      identities?: components['schemas']['IdentityDocument'][]
      /** @description Addresses */
      addresses?: components['schemas']['Address'][]
      /** @description Phone numbers */
      phoneNumbers?: components['schemas']['PhoneNumber'][]
      /** @description Email addresses */
      emailAddresses?: components['schemas']['EmailAddress'][]
      /** @description Employments */
      employments?: components['schemas']['Employment'][]
      staff?: boolean
    }
    /** @description A single email address */
    EmailAddress: {
      emailAddress: string
    }
    /** @description Request to create a new employment with an employer and whether it is active or inactive */
    Employment: {
      /**
       * Format: int64
       * @description The organisation id
       * @example 123456789
       */
      organisationId: number
      /** @description Whether this is a current employment or not */
      isActive: boolean
    }
    /** @description An identity document */
    IdentityDocument: {
      /**
       * @description Type of identity
       * @example DL
       */
      identityType: string
      /**
       * @description The identity value such as driving licence number
       * @example DL123456789
       */
      identityValue: string
      /**
       * @description The authority who issued the identity
       * @example DVLA
       */
      issuingAuthority?: string
    }
    /** @description A single contact or address phone number */
    PhoneNumber: {
      /**
       * @description Type of phone
       * @example MOB
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
    }
    /** @description An address related to a contact with descriptions of all reference data */
    ContactAddressDetails: {
      /**
       * Format: int64
       * @description The id of the contact address
       * @example 123456
       */
      contactAddressId: number
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      contactId: number
      /**
       * @description
       *           The type of address (optional).
       *           This is a coded value (from the group code ADDRESS_TYPE in reference data).
       *           The known values are HOME, WORK or BUS (business address).
       *
       * @example HOME
       */
      addressType?: string
      /**
       * @description The description of the address type
       * @example HOME
       */
      addressTypeDescription?: string
      /**
       * @description True if this is the primary address otherwise false
       * @example true
       */
      primaryAddress: boolean
      /**
       * @description Flat number or name
       * @example Flat 2B
       */
      flat?: string
      /**
       * @description Building or house number or name
       * @example Mansion House
       */
      property?: string
      /**
       * @description Street or road name
       * @example Acacia Avenue
       */
      street?: string
      /**
       * @description Area
       * @example Morton Heights
       */
      area?: string
      /**
       * @description City code
       * @example 25343
       */
      cityCode?: string
      /**
       * @description The description of city code
       * @example Sheffield
       */
      cityDescription?: string
      /**
       * @description County code
       * @example S.YORKSHIRE
       */
      countyCode?: string
      /**
       * @description The description of county code
       * @example South Yorkshire
       */
      countyDescription?: string
      /**
       * @description Postcode
       * @example S13 4FH
       */
      postcode?: string
      /**
       * @description Country code
       * @example ENG
       */
      countryCode?: string
      /**
       * @description The description of country code
       * @example England
       */
      countryDescription?: string
      /**
       * @description Whether the address has been verified by postcode lookup
       * @example false
       */
      verified: boolean
      /**
       * @description Which username ran the postcode lookup check
       * @example NJKG44D
       */
      verifiedBy?: string
      /**
       * Format: date-time
       * @description The timestamp of when the postcode lookup was done
       * @example 2024-01-01T00:00:00Z
       */
      verifiedTime?: string
      /**
       * @description Flag to indicate whether mail is allowed to be sent to this address
       * @example false
       */
      mailFlag: boolean
      /**
       * Format: date
       * @description The start date when this address is to be considered active from
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date when this address is to be considered no longer active
       * @example 2024-01-01
       */
      endDate?: string
      /**
       * @description Flag to indicate whether this address indicates no fixed address
       * @example false
       */
      noFixedAddress: boolean
      /**
       * @description Any additional information or comments about the address
       * @example Some additional information
       */
      comments?: string
      /** @description Phone numbers that are related to this address */
      phoneNumbers: components['schemas']['ContactAddressPhoneDetails'][]
      /**
       * @description The id of the user who created the contact
       * @example JD000001
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
      /**
       * @description The id of the user who last updated the contact address
       * @example JD000001
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact address was last updated
       * @example 2024-01-01T00:00:00Z
       */
      updatedTime?: string
    }
    /** @description The result of creating a contact and optionally a new relationship to a prisoner */
    ContactCreationResult: {
      /** @description The details of a contact as an individual */
      createdContact: components['schemas']['ContactDetails']
      /** @description Describes the prisoner contact relationship if one was created with the contact */
      createdRelationship?: components['schemas']['PrisonerContactRelationshipDetails']
    }
    /** @description The details of a contact as an individual */
    ContactDetails: {
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      id: number
      /**
       * @description
       *           The title code for the contact.
       *           This is a coded value (from the group code TITLE in reference data).
       *           Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.
       *
       * @example MR
       */
      titleCode?: string
      /**
       * @description The description of the title code, if present
       * @example Mr
       */
      titleDescription?: string
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleNames?: string
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /**
       * @description Whether the contact is a staff member
       * @example false
       */
      isStaff: boolean
      /**
       * Format: date
       * @description The date the contact deceased, if known
       * @example 1980-01-01
       */
      deceasedDate?: string
      /**
       * @description The NOMIS code for the contacts language
       * @example ENG
       */
      languageCode?: string
      /**
       * @description The description of the language code
       * @example English
       */
      languageDescription?: string
      /**
       * @description Whether an interpreter is required for this contact
       * @example true
       */
      interpreterRequired: boolean
      /** @description All addresses for the contact */
      addresses: components['schemas']['ContactAddressDetails'][]
      /** @description All phone numbers for the contact */
      phoneNumbers: components['schemas']['ContactPhoneDetails'][]
      /** @description All email addresses for the contact */
      emailAddresses: components['schemas']['ContactEmailDetails'][]
      /** @description All identities for the contact */
      identities: components['schemas']['ContactIdentityDetails'][]
      /** @description All employments for the contact */
      employments: components['schemas']['EmploymentDetails'][]
      /**
       * @description The NOMIS code for the contacts domestic status
       * @example S
       */
      domesticStatusCode?: string
      /**
       * @description The description of the domestic status code
       * @example Single
       */
      domesticStatusDescription?: string
      /** @description The NOMIS code for the contacts gender. See reference data with group code 'GENDER' */
      genderCode?: string
      /** @description The description of gender code. See reference data with group code 'GENDER' */
      genderDescription?: string
      /**
       * @description The id of the user who created the contact
       * @example JD000001
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime: string
      staff?: boolean
    }
    /** @description Request to create a new global restriction on a contact, a.k.a an estate-wide restriction */
    CreateContactRestrictionRequest: {
      /**
       * @description
       *         The coded type of restriction that applies to this contact.
       *         This is a coded value from the group RESTRICTION in reference codes.
       *         Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.
       *
       * @example BAN
       */
      restrictionType: string
      /**
       * Format: date
       * @description Restriction start date
       * @example 2024-01-01
       */
      startDate: string
      /**
       * Format: date
       * @description Restriction end date
       * @example 2024-01-01
       */
      expiryDate?: string
      /**
       * @description Comments for the restriction
       * @example N/A
       */
      comments?: string
    }
    /** @description Request to create multiple phone numbers for a contact or an address */
    CreateMultiplePhoneNumbersRequest: {
      /** @description Phone numbers */
      phoneNumbers: components['schemas']['PhoneNumber'][]
    }
    /** @description Request to create a new phone number */
    CreatePhoneRequest: {
      /**
       * @description Type of phone
       * @example MOB
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
    }
    /** @description Request to create a new contact identity */
    CreateIdentityRequest: {
      /**
       * @description Type of identity
       * @example DL
       */
      identityType: string
      /**
       * @description The identity value such as driving licence number
       * @example DL123456789
       */
      identityValue: string
      /**
       * @description The authority who issued the identity
       * @example DVLA
       */
      issuingAuthority?: string
    }
    /** @description Request to create multiple contact identity documents */
    CreateMultipleIdentitiesRequest: {
      /** @description Identity documents */
      identities: components['schemas']['IdentityDocument'][]
    }
    /** @description Request to create a new employment with an employer and whether it is active or inactive */
    CreateEmploymentRequest: {
      /**
       * Format: int64
       * @description The organisation id
       * @example 123456789
       */
      organisationId: number
      /** @description Whether this is a current employment or not */
      isActive: boolean
    }
    /** @description Request to create a new email address */
    CreateMultipleEmailsRequest: {
      /** @description Email addresses */
      emailAddresses: components['schemas']['EmailAddress'][]
    }
    /** @description Request to create a new email address */
    CreateEmailRequest: {
      /**
       * @description Email address
       * @example test@example.com
       */
      emailAddress: string
    }
    /** @description Request to create a new contact address */
    CreateContactAddressRequest: {
      /**
       * @description
       *           The type of address.
       *           This is a coded value (from the group code ADDRESS_TYPE in reference data).
       *           The known values are HOME, WORK or BUS (business address).
       *
       * @example HOME
       */
      addressType?: string
      /**
       * @description True if this is the primary address otherwise false
       * @example true
       */
      primaryAddress: boolean
      /**
       * @description Flat number or name
       * @example Flat 2B
       */
      flat?: string
      /**
       * @description Building or house number or name
       * @example Mansion House
       */
      property?: string
      /**
       * @description Street or road name
       * @example Acacia Avenue
       */
      street?: string
      /**
       * @description Area
       * @example Morton Heights
       */
      area?: string
      /**
       * @description City code - from NOMIS
       * @example 13232
       */
      cityCode?: string
      /**
       * @description County code - from NOMIS
       * @example WMIDS
       */
      countyCode?: string
      /**
       * @description Postcode
       * @example S13 4FH
       */
      postcode?: string
      /**
       * @description Country code - from NOMIS
       * @example UK
       */
      countryCode: string
      /**
       * @description Whether the address has been verified by postcode lookup
       * @example false
       */
      verified?: boolean
      /**
       * @description Whether the address can be used for mailing
       * @example false
       */
      mailFlag?: boolean
      /**
       * Format: date
       * @description The start date when this address can be considered active from
       * @example 2023-01-12
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date when this address can be considered active until
       * @example 2023-01-12
       */
      endDate?: string
      /**
       * @description Flag to indicate this address should be considered as no fixed address
       * @example false
       */
      noFixedAddress?: boolean
      /** @description List of new address-specific phone numbers to create */
      phoneNumbers: components['schemas']['PhoneNumber'][]
      /**
       * @description Any additional information or comments about the address
       * @example Some additional information
       */
      comments?: string
    }
    /** @description Request to create a new address-linked phone number */
    CreateContactAddressPhoneRequest: {
      /**
       * Format: int64
       * @description Unique identifier for the contact address
       * @example 123
       */
      contactAddressId: number
      /**
       * @description Type of phone
       * @example MOB
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
    }
    /** @description Request to update an existing relationship details */
    PatchRelationshipRequest: {
      /**
       * @description The code representing the relationship type as social or official
       * @example S
       */
      relationshipTypeCode?: string
      /**
       * @description The relationship reference code between the prisoner and the contact
       * @example FRI
       */
      relationshipToPrisonerCode?: string
      /**
       * @description Whether they are the emergency contact for the prisoner
       * @example true
       */
      isEmergencyContact?: boolean
      /**
       * @description Whether they are approved to visit the prisoner
       * @example true
       */
      isApprovedVisitor?: boolean
      /**
       * @description Whether they are the next of kin for the prisoner
       * @example true
       */
      isNextOfKin?: boolean
      /**
       * @description Whether the relationship is active
       * @example true
       */
      isRelationshipActive?: boolean
      /**
       * @description Comments about the contacts relationship with the prisoner
       * @example Some additional information
       */
      comments?: string
    }
    /** @description Request to patch a new contact. firstName and lastName are not updatable so are intentionally missing from this request. */
    PatchContactRequest: {
      /**
       * @description Whether the contact is a staff member
       * @example false
       */
      isStaff?: boolean
      /**
       * @description The domestic status code of the contact
       * @example S
       */
      domesticStatusCode?: string
      /**
       * @description Whether an interpreter is required
       * @example false
       */
      interpreterRequired?: boolean
      /**
       * @description The language code of the contact
       * @example EN
       */
      languageCode?: string
      /**
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /**
       * @description The title code for the contact, if any
       * @example MR
       */
      titleCode?: string
      /**
       * @description The middle names of the contact, if any
       * @example William
       */
      middleNames?: string
      /**
       * @description
       *         The optional gender code for the contact.
       *         This is a coded value (from the group code GENDER in reference data).
       *         Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.
       *
       * @example M
       */
      genderCode?: string
      /**
       * @description The date the contact deceased, if known
       * @example 1980-01-01
       */
      deceasedDate?: string
    }
    /** @description The details of a updated contact as an individual */
    PatchContactResponse: {
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      id: number
      /**
       * @description
       *         The title code for the contact.
       *         This is a coded value (from the group code TITLE in reference data).
       *         Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.
       *
       * @example MR
       */
      titleCode?: string
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleNames?: string
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /**
       * @description Whether the contact is a staff member
       * @example false
       */
      isStaff: boolean
      /**
       * Format: date
       * @description The date the contact was deceased, if applicable
       * @example 2023-05-01
       */
      deceasedDate?: string
      /**
       * @description
       *         The gender code for the contact.
       *         This is a coded value (from the group code GENDER in reference data).
       *         Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.
       *
       * @example M
       */
      genderCode?: string
      /**
       * @description The domestic status code of the contact
       * @example S
       */
      domesticStatusCode?: string
      /**
       * @description The language code of the contact
       * @example EN
       */
      languageCode?: string
      /**
       * @description Whether an interpreter is required
       * @example false
       */
      interpreterRequired?: boolean
      /**
       * @description User who created the entry
       * @example admin
       */
      createdBy: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was created
       * @example 2023-09-23T10:15:30
       */
      createdTime: string
      /**
       * @description User who updated the entry
       * @example admin2
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description Timestamp when the entry was updated
       * @example 2023-09-24T12:00:00
       */
      updatedTime?: string
      staff?: boolean
    }
    /** @description Request allowing several changes to employments in a single request. */
    PatchEmploymentsRequest: {
      /** @description List of new employments to create */
      createEmployments: components['schemas']['Employment'][]
      /** @description List of updates to apply to existing employments */
      updateEmployments: components['schemas']['PatchEmploymentsUpdateEmployment'][]
      /** @description List of ids for employments to delete */
      deleteEmployments: number[]
    }
    /** @description Request to update an existing employment's employer or active flag. */
    PatchEmploymentsUpdateEmployment: {
      /**
       * Format: int64
       * @description The id for this employment
       * @example 123456
       */
      employmentId: number
      /**
       * Format: int64
       * @description The organisation id
       * @example 123456789
       */
      organisationId: number
      /** @description Whether this is a current employment or not */
      isActive: boolean
    }
    JsonNullableString: {
      present?: boolean
    }
    /** @description Request to patch a contact address */
    PatchContactAddressRequest: {
      /**
       * @description
       *         The type of address.
       *         This is a coded value (from the group code ADDRESS_TYPE in reference data).
       *         The known values are HOME, WORK or BUS (business address).
       *
       * @example HOME
       */
      addressType?: components['schemas']['JsonNullableString']
      /**
       * @description True if this is the primary address otherwise false
       * @example true
       */
      primaryAddress?: boolean
      /**
       * @description Flat number or name
       * @example Flat 2B
       */
      flat?: string
      /**
       * @description Building or house number or name
       * @example Mansion House
       */
      property?: string
      /**
       * @description Street or road name
       * @example Acacia Avenue
       */
      street?: string
      /**
       * @description Area
       * @example Morton Heights
       */
      area?: string
      /**
       * @description City code - from NOMIS reference data
       * @example BIRM
       */
      cityCode?: string
      /**
       * @description County code - from NOMIS reference data
       * @example WMIDS
       */
      countyCode?: string
      /**
       * @description Postcode
       * @example S13 4FH
       */
      postcode?: string
      /**
       * @description Country code - from NOMIS reference data
       * @example UK
       */
      countryCode?: string
      /**
       * @description Whether the address has been verified by postcode lookup
       * @example false
       */
      verified?: boolean
      /**
       * @description Whether the address can be used for mailing
       * @example false
       */
      mailFlag?: boolean
      /**
       * @description The start date when this address can be considered active from
       * @example 2023-01-12
       */
      startDate?: string
      /**
       * @description The end date when this address can be considered active until
       * @example 2023-01-12
       */
      endDate?: string
      /**
       * @description Flag to indicate this address should be considered as no fixed address
       * @example false
       */
      noFixedAddress?: boolean
      /**
       * @description Any additional information or comments about the address
       * @example Some additional information
       */
      comments?: string
    }
    /** @description Prisoner single relationship reconciliation */
    ReconcilePrisonerRelationship: {
      /**
       * Format: int64
       * @description The ID of the contact
       * @example 12345
       */
      contactId: number
      /**
       * Format: int64
       * @description The ID of the prisoner contact
       * @example 12345
       */
      prisonerContactId: number
      /**
       * @description Contact first name
       * @example Bob
       */
      firstName?: string
      /**
       * @description Contact last name
       * @example Smith
       */
      lastName?: string
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description Social or official contact
       * @example S
       */
      relationshipTypeCode: string
      /**
       * @description The relationship code from reference data
       * @example FRIEND
       */
      relationshipToPrisoner: string
      /**
       * @description Indicates if the prisoner contact is next of kin
       * @example true
       */
      nextOfKin: boolean
      /**
       * @description Indicates if the prisoner contact is an emergency contact
       * @example true
       */
      emergencyContact: boolean
      /**
       * @description Indicates if the prisoner contact is active
       * @example true
       */
      active: boolean
      /**
       * @description Indicates if the prisoner contact is an approved visitor
       * @example true
       */
      approvedVisitor: boolean
      /** @description The list of restrictions on this relationship */
      restrictions: components['schemas']['ReconcileRelationshipRestriction'][]
    }
    /** @description Contact relationship restriction reconciliation */
    ReconcileRelationshipRestriction: {
      /**
       * Format: int64
       * @description The ID of the prisoner contact restriction
       * @example 12345
       */
      prisonerContactRestrictionId: number
      /**
       * @description Type of restriction
       * @example MOBILE
       */
      restrictionType: string
      /**
       * Format: date
       * @description Restriction created date
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description Restriction end date
       * @example 2024-01-01
       */
      expiryDate?: string
    }
    /** @description Prisoner relationship reconciliation */
    SyncPrisonerReconcile: {
      relationships: components['schemas']['ReconcilePrisonerRelationship'][]
    }
    EmploymentEntity: {
      /** Format: int64 */
      employmentId: number
      /** Format: int64 */
      organisationId: number
      /** Format: int64 */
      contactId: number
      active: boolean
      createdBy: string
      /** Format: date-time */
      createdTime: string
      updatedBy?: string
      /** Format: date-time */
      updatedTime?: string
    }
    /** @description Contact address reconciliation */
    ReconcileAddress: {
      /**
       * Format: int64
       * @description The id of the contact address
       * @example 123456
       */
      contactAddressId: number
      /**
       * @description The coded value for type of address
       * @example HOME
       */
      addressType?: string
      /**
       * @description True if this is the primary address otherwise false
       * @example true
       */
      primaryAddress: boolean
      /**
       * @description Building or house number or name
       * @example Mansion House
       */
      property?: string
      /**
       * @description Street or road name
       * @example Acacia Avenue
       */
      street?: string
      /**
       * @description Area
       * @example Morton Heights
       */
      area?: string
      /** @description Address-specific phone numbers */
      addressPhones: components['schemas']['ReconcileAddressPhone'][]
    }
    /** @description Contact address phone reconciliation */
    ReconcileAddressPhone: {
      /**
       * Format: int64
       * @description Unique identifier for the contact address phone
       * @example 1
       */
      contactAddressPhoneId: number
      /**
       * @description Type of phone
       * @example MOB
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
    }
    /** @description Contact email reconciliation */
    ReconcileEmail: {
      /**
       * Format: int64
       * @description Unique identifier for the contact email
       * @example 1
       */
      contactEmailId: number
      /**
       * @description Email address
       * @example test@example.com
       */
      emailAddress: string
    }
    /** @description Contact employment reconciliation */
    ReconcileEmployment: {
      /**
       * Format: int64
       * @description The ID of the employment
       * @example 12345
       */
      employmentId: number
      /**
       * Format: int64
       * @description The ID of the organization associated with the employment
       * @example 12345
       */
      organisationId: number
      /**
       * @description If the employment is active
       * @example true
       */
      active: boolean
    }
    /** @description Contact identity reconciliation */
    ReconcileIdentity: {
      /**
       * Format: int64
       * @description Unique identifier for the contact identity
       * @example 1
       */
      contactIdentityId: number
      /**
       * @description Type of identity
       * @example DL
       */
      identityType: string
      /**
       * @description Identity
       * @example DL090 0909 909
       */
      identityValue: string
      /**
       * @description Issuing authority
       * @example DVLA
       */
      issuingAuthority?: string
    }
    /** @description Contact phone reconciliation */
    ReconcilePhone: {
      /**
       * Format: int64
       * @description Unique identifier for the contact phone
       * @example 1
       */
      contactPhoneId: number
      /**
       * @description Type of phone
       * @example MOB
       */
      phoneType: string
      /**
       * @description Phone number
       * @example +1234567890
       */
      phoneNumber: string
      /**
       * @description Extension number
       * @example 123
       */
      extNumber?: string
    }
    /** @description Prisoner contact relationship reconciliation */
    ReconcileRelationship: {
      /**
       * Format: int64
       * @description The ID of the prisoner contact
       * @example 12345
       */
      prisonerContactId: number
      /**
       * @description The prisoner number
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description Social or official contact
       * @example S
       */
      contactType: string
      /**
       * @description The relationship code from reference data
       * @example Friend
       */
      relationshipType: string
      /**
       * @description Indicates if the prisoner contact is next of kin
       * @example true
       */
      nextOfKin: boolean
      /**
       * @description Indicates if the prisoner contact is an emergency contact
       * @example true
       */
      emergencyContact: boolean
      /**
       * @description Indicates if the prisoner contact is active
       * @example true
       */
      active: boolean
      /**
       * @description Indicates if the prisoner contact is an approved visitor
       * @example true
       */
      approvedVisitor: boolean
      /** @description The list of restrictions on this relationship */
      relationshipRestrictions: components['schemas']['ReconcileRelationshipRestriction'][]
    }
    /** @description Contact restriction reconciliation */
    ReconcileRestriction: {
      /**
       * Format: int64
       * @description The ID of the contact restriction
       * @example 12345
       */
      contactRestrictionId: number
      /**
       * @description Type of restriction
       * @example MOBILE
       */
      restrictionType: string
      /**
       * Format: date
       * @description Restriction created date
       * @example 2024-01-01
       */
      startDate?: string
      /**
       * Format: date
       * @description Restriction end date
       * @example 2024-01-01
       */
      expiryDate?: string
    }
    /** @description Reconciliation data for one contact */
    SyncContactReconcile: {
      /**
       * Format: int64
       * @description Unique identifier for a contact
       * @example 1111
       */
      contactId: number
      /**
       * @description Contact first name
       * @example Bob
       */
      firstName: string
      /**
       * @description Contact last name
       * @example Smith
       */
      lastName: string
      /**
       * @description Contact middle names
       * @example David
       */
      middleNames?: string
      /**
       * Format: date
       * @description Contact data of birth
       * @example 2001-02-01
       */
      dateOfBirth?: string
      /**
       * @description Staff indicator
       * @example false
       */
      staffFlag: boolean
      phones: components['schemas']['ReconcilePhone'][]
      addresses: components['schemas']['ReconcileAddress'][]
      emails: components['schemas']['ReconcileEmail'][]
      identities: components['schemas']['ReconcileIdentity'][]
      restrictions: components['schemas']['ReconcileRestriction'][]
      relationships: components['schemas']['ReconcileRelationship'][]
      employments: components['schemas']['ReconcileEmployment'][]
    }
    PageMetadata: {
      /** Format: int64 */
      size?: number
      /** Format: int64 */
      number?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int64 */
      totalPages?: number
    }
    PagedModelSyncContactId: {
      content?: components['schemas']['SyncContactId'][]
      page?: components['schemas']['PageMetadata']
    }
    /** @description Response object for sync reconciliation */
    SyncContactId: {
      /**
       * Format: int64
       * @description The ID for an contact
       * @example 111111
       */
      contactId: number
    }
    /** @enum {string} */
    ReferenceCodeGroup:
      | 'DOMESTIC_STS'
      | 'OFFICIAL_RELATIONSHIP'
      | 'ID_TYPE'
      | 'LANGUAGE'
      | 'GENDER'
      | 'SOCIAL_RELATIONSHIP'
      | 'CITY'
      | 'COUNTY'
      | 'RELATIONSHIP_TYPE'
      | 'COUNTRY'
      | 'ADDRESS_TYPE'
      | 'PHONE_TYPE'
      | 'RESTRICTION'
      | 'TITLE'
      | 'TEST_TYPE'
    Sort: {
      sort?: string[]
    }
    /** @description Describes the details of a reference code */
    ReferenceCode: {
      /**
       * Format: int64
       * @description An internally-generated unique identifier for this reference code.
       * @example 12345
       */
      referenceCodeId: number
      /**
       * @description The group name for related reference codes.
       * @example PHONE_TYPE
       */
      groupCode: components['schemas']['ReferenceCodeGroup']
      /**
       * @description The code for this reference data
       * @example MOB
       */
      code: string
      /**
       * @description A fuller description of the reference code
       * @example Mobile
       */
      description: string
      /**
       * Format: int32
       * @description The default order configured for the reference code, lowest number first.
       * @example 5
       */
      displayOrder: number
      /**
       * @description Whether the reference code is still in use. Old reference codes are maintained for compatability with legacy data.
       * @example true
       */
      isActive: boolean
    }
    PagedModelPrisonerContactSummary: {
      content?: components['schemas']['PrisonerContactSummary'][]
      page?: components['schemas']['PageMetadata']
    }
    /** @description Describes the details of a prisoner's contact */
    PrisonerContactSummary: {
      /**
       * Format: int64
       * @description The unique identifier for the prisoner contact
       * @example 123456
       */
      prisonerContactId: number
      /**
       * Format: int64
       * @description The unique identifier for the contact
       * @example 654321
       */
      contactId: number
      /**
       * @description Prisoner number (NOMS ID)
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * @description
       *           The title code for the contact.
       *           This is a coded value (from the group code TITLE in reference data).
       *
       * @example MR
       */
      titleCode?: string
      /**
       * @description The description of the title code, if present
       * @example Mr
       */
      titleDescription?: string
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle names of the contact, if any
       * @example William
       */
      middleNames?: string
      /**
       * Format: date
       * @description The date of birth of the contact
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /**
       * Format: date
       * @description The date the contact deceased, if known
       * @example 1980-01-01
       */
      deceasedDate?: string
      /**
       * @description
       *           Coded value indicating either a social or official contact (mandatory).
       *           This is a coded value from the group code CONTACT_TYPE in reference data.
       *           Known values are (S) Social or (O) official.
       *
       * @example S
       */
      relationshipTypeCode: string
      /**
       * @description The description of the relationship type
       * @example Friend
       */
      relationshipTypeDescription: string
      /**
       * @description The relationship to the prisoner. A code from SOCIAL_RELATIONSHIP or OFFICIAL_RELATIONSHIP reference data groups depending on the relationship type.
       * @example FRI
       */
      relationshipToPrisonerCode: string
      /**
       * @description The description of the relationship to the prisoner
       * @example Friend
       */
      relationshipToPrisonerDescription: string
      /**
       * @description Flat number in the address, if any
       * @example Flat 1
       */
      flat?: string
      /**
       * @description Property name or number
       * @example 123
       */
      property?: string
      /**
       * @description Street name
       * @example Baker Street
       */
      street?: string
      /**
       * @description Area or locality, if any
       * @example Marylebone
       */
      area?: string
      /**
       * @description City code
       * @example 25343
       */
      cityCode?: string
      /**
       * @description The description of city code
       * @example Sheffield
       */
      cityDescription?: string
      /**
       * @description County code
       * @example S.YORKSHIRE
       */
      countyCode?: string
      /**
       * @description The description of county code
       * @example South Yorkshire
       */
      countyDescription?: string
      /**
       * @description Postal code
       * @example NW1 6XE
       */
      postcode?: string
      /**
       * @description Country code
       * @example ENG
       */
      countryCode?: string
      /**
       * @description The description of country code
       * @example England
       */
      countryDescription?: string
      /**
       * @description Flag to indicate whether this address indicates no fixed address
       * @example false
       */
      noFixedAddress?: boolean
      /**
       * @description If true this address should be considered as the primary residential address
       * @example true
       */
      primaryAddress?: boolean
      /**
       * @description If true this address should be considered for sending mail to
       * @example true
       */
      mailAddress?: boolean
      /**
       * @description Type of the latest phone number
       * @example MOB
       */
      phoneType?: string
      /**
       * @description Description of the type of the latest phone number
       * @example Mobile
       */
      phoneTypeDescription?: string
      /**
       * @description The latest phone number, if there are any
       * @example +1234567890
       */
      phoneNumber?: string
      /**
       * @description The extension number of the latest phone number
       * @example 123
       */
      extNumber?: string
      /**
       * @description Indicates whether the contact is an approved visitor
       * @example true
       */
      isApprovedVisitor: boolean
      /**
       * @description Is this contact the prisoner's next of kin?
       * @example false
       */
      isNextOfKin: boolean
      /**
       * @description Is this contact the prisoner's emergency contact?
       * @example true
       */
      isEmergencyContact: boolean
      /**
       * @description Is this prisoner's contact relationship active?
       * @example true
       */
      isRelationshipActive: boolean
      /**
       * @description Is this relationship active for the current booking?
       * @example true
       */
      currentTerm: boolean
      /**
       * @description Any additional comments
       * @example Close family friend
       */
      comments?: string
      /**
       * @description Whether the contact is a staff member
       * @example false
       */
      isStaff: boolean
      restrictionSummary: components['schemas']['RestrictionsSummary']
    }
    RestrictionTypeDetails: {
      restrictionType: string
      restrictionTypeDescription: string
    }
    RestrictionsSummary: {
      active: components['schemas']['RestrictionTypeDetails'][]
      /** Format: int32 */
      totalActive: number
      /** Format: int32 */
      totalExpired: number
    }
    /** @description A count of a prisoners contact relationships */
    PrisonerContactRelationshipCount: {
      /**
       * Format: int64
       * @description The number of active social relationships
       */
      social: number
      /**
       * Format: int64
       * @description The number of active official relationships
       */
      official: number
    }
    /** @description Restriction related to a specific relationship between a prisoner and contact */
    PrisonerContactRestrictionsResponse: {
      /** @description Relationship specific restrictions */
      prisonerContactRestrictions: components['schemas']['PrisonerContactRestrictionDetails'][]
      /** @description Global (estate-wide) restrictions for the contact */
      contactGlobalRestrictions: components['schemas']['ContactRestrictionDetails'][]
    }
    ContactNameDetails: {
      /**
       * @description
       *           The title code for the contact.
       *           This is a coded value (from the group code TITLE in reference data).
       *           Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.
       *
       * @example MR
       */
      titleCode?: string
      /**
       * @description The description of the title code, if present
       * @example Mr
       */
      titleDescription?: string
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleNames?: string
    }
    /** @description The details of a single relationship between a prisoner and a contact */
    LinkedPrisonerDetails: {
      /**
       * @description Prisoner number (NOMS ID)
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The unique identifier for the prisoner contact relationship
       * @example 123456
       */
      prisonerContactId: number
      /**
       * @description The last name of the prisoner. Nullable in the case the prisoners details are unavailable.
       * @example Doe
       */
      lastName?: string
      /**
       * @description The first name of the prisoner. Nullable in the case the prisoners details are unavailable.
       * @example John
       */
      firstName?: string
      /**
       * @description The middle names of the prisoner, if any
       * @example William
       */
      middleNames?: string
      /**
       * @description The id of the prisoners current prison
       * @example BXI
       */
      prisonId?: string
      /**
       * @description The name of the prisoners current prison
       * @example Brixton (HMP)
       */
      prisonName?: string
      /**
       * @description
       *           Coded value indicating either a social or official contact (mandatory).
       *           This is a coded value from the group code CONTACT_TYPE in reference data.
       *           Known values are (S) Social or (O) official.
       *
       * @example S
       */
      relationshipTypeCode: string
      /**
       * @description The description of the contact relationship type. Description from reference data Official or Social
       * @example Official
       */
      relationshipTypeDescription: string
      /**
       * @description The relationship to the prisoner. A code from SOCIAL_RELATIONSHIP or OFFICIAL_RELATIONSHIP reference data groups depending on the relationship type.
       * @example FRI
       */
      relationshipToPrisonerCode: string
      /**
       * @description The description of the relationship
       * @example Friend
       */
      relationshipToPrisonerDescription?: string
      /**
       * @description Is this prisoner's contact relationship active?
       * @example true
       */
      isRelationshipActive: boolean
    }
    PagedModelLinkedPrisonerDetails: {
      content?: components['schemas']['LinkedPrisonerDetails'][]
      page?: components['schemas']['PageMetadata']
    }
    /** @description The details of a contact as an individual */
    ContactSearchResultItem: {
      /**
       * Format: int64
       * @description The id of the contact
       * @example 123456
       */
      id: number
      /**
       * @description The last name of the contact
       * @example Doe
       */
      lastName: string
      /**
       * @description The first name of the contact
       * @example John
       */
      firstName: string
      /**
       * @description The middle name of the contact, if any
       * @example William
       */
      middleNames?: string
      /**
       * Format: date
       * @description The date of birth of the contact, if known
       * @example 1980-01-01
       */
      dateOfBirth?: string
      /**
       * Format: date
       * @description The date the contact deceased, if known
       * @example 1980-01-01
       */
      deceasedDate?: string
      /**
       * @description The id of the user who created the contact
       * @example JD000001
       */
      createdBy?: string
      /**
       * Format: date-time
       * @description The timestamp of when the contact was created
       * @example 2024-01-01T00:00:00Z
       */
      createdTime?: string
      /**
       * @description The flat of the contact address, if known
       * @example 01
       */
      flat?: string
      /**
       * @description The property of the contact address, if known
       * @example 01
       */
      property?: string
      /**
       * @description The street of the contact address, if known
       * @example Bluebell Crescent
       */
      street?: string
      /**
       * @description The area of the contact address, if known
       * @example Birmingham
       */
      area?: string
      /**
       * @description The city code of the contact address, if known
       * @example 25343
       */
      cityCode?: string
      /**
       * @description The description of city code, if known
       * @example Sheffield
       */
      cityDescription?: string
      /**
       * @description The county code of the contact address, if known
       * @example S.YORKSHIRE
       */
      countyCode?: string
      /**
       * @description The description of county code, if known
       * @example South Yorkshire
       */
      countyDescription?: string
      /**
       * @description The postcode of the contact address, if known
       * @example B42 2QJ
       */
      postcode?: string
      /**
       * @description The country code of the contact address, if known
       * @example ENG
       */
      countryCode?: string
      /**
       * @description The description of country code, if known
       * @example England
       */
      countryDescription?: string
      /**
       * @description If true this address should be considered for sending mail to
       * @example true
       */
      mailAddress?: boolean
      /**
       * Format: date
       * @description The date from which this address can be considered active
       * @example 2022-10-01
       */
      startDate?: string
      /**
       * Format: date
       * @description The date after which this address should be considered inactive
       * @example 2023-10-02
       */
      endDate?: string
      /**
       * @description A flag to indicate that this address is effectively no fixed address
       * @example false
       */
      noFixedAddress?: boolean
      /**
       * @description Any additional information or comments about the address
       * @example Some additional information
       */
      comments?: string
      /** @description A list of existing relationships to a prisoner if a check against the prisoner number was requested. Empty if there are no existing relationships or null if it was not requested. */
      existingRelationships?: components['schemas']['ExistingRelationshipToPrisoner'][]
    }
    ExistingRelationshipToPrisoner: {
      /**
       * Format: int64
       * @description The unique identifier for the prisoner contact
       * @example 123456
       */
      prisonerContactId: number
      /**
       * @description
       *           Coded value indicating either a social or official contact (mandatory).
       *           This is a coded value from the group code CONTACT_TYPE in reference data.
       *           Known values are (S) Social or (O) official.
       *
       * @example S
       */
      relationshipTypeCode: string
      /**
       * @description The description of the contact relationship type. Description from reference data Official or Social
       * @example Official
       */
      relationshipTypeDescription: string
      /**
       * @description The relationship to the prisoner. A code from SOCIAL_RELATIONSHIP or OFFICIAL_RELATIONSHIP reference data groups depending on the relationship type.
       * @example FRI
       */
      relationshipToPrisonerCode: string
      /**
       * @description The description of the relationship
       * @example Friend
       */
      relationshipToPrisonerDescription?: string
      /**
       * @description Is this prisoner's contact relationship active?
       * @example true
       */
      isRelationshipActive: boolean
    }
    PagedModelContactSearchResultItem: {
      content?: components['schemas']['ContactSearchResultItem'][]
      page?: components['schemas']['PageMetadata']
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  syncGetNumberOfChildrenByPrisonerNumber: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the number of children */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerNumberOfChildrenResponse']
        }
      }
      /** @description Could not find the number of children for this prisoner */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncUpdateNumberOfChildren: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncUpdatePrisonerNumberOfChildrenRequest']
      }
    }
    responses: {
      /** @description Successfully created/updated Prisoner's number of children */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerNumberOfChildrenResponse']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncGetDomesticStatusByPrisonerNumber: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the domestic status */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerDomesticStatusResponse']
        }
      }
      /** @description No active domestic status found for the requested prisoner. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncUpdateDomesticStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncUpdatePrisonerDomesticStatusRequest']
      }
    }
    responses: {
      /** @description Successfully created/updated domestic status for the requested prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerDomesticStatusResponse']
        }
      }
      /** @description Invalid data provided in the request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the reference data for the supplied domestic status code */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncGetPrisonerRestrictionById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a prisoner restriction. */
        prisonerRestrictionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the prisoner restriction */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerRestriction']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No prisoner restriction reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncUpdatePrisonerRestriction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the prisoner restriction. */
        prisonerRestrictionId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncUpdatePrisonerRestrictionRequest']
      }
    }
    responses: {
      /** @description Successfully updated prisoner restriction */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerRestriction']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No prisoner restriction reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerRestriction']
        }
      }
    }
  }
  syncDeletePrisonerRestrictionById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the prisoner restriction. */
        prisonerRestrictionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully deleted prisoner restriction */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No prisoner restriction reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  syncGetPrisonerContactById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a prisoner contact. */
        prisonerContactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the prisoner contact */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContact']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No prisoner contact reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContact']
        }
      }
    }
  }
  syncUpdatePrisonerContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the prisoner contact. */
        prisonerContactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncUpdatePrisonerContactRequest']
      }
    }
    responses: {
      /** @description Successfully updated prisoner contact */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContact']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContact']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner contact not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContact']
        }
      }
    }
  }
  syncDeletePrisonerContactById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the prisoner contact. */
        prisonerContactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully deleted prisoner contact */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContact']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No prisoner contact reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContact']
        }
      }
    }
  }
  syncGetPrisonerContactRestrictionById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a prisoner contact restriction. */
        prisonerContactRestrictionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the prisoner contact restriction */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContactRestriction']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No prisoner contact restriction reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContactRestriction']
        }
      }
    }
  }
  syncUpdatePrisonerContactRestriction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the prisoner contact restriction. */
        prisonerContactRestrictionId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncUpdatePrisonerContactRestrictionRequest']
      }
    }
    responses: {
      /** @description Successfully updated prisoner contact restriction */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContactRestriction']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContactRestriction']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner contact restriction or relationship was not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContactRestriction']
        }
      }
    }
  }
  syncDeletePrisonerContactRestrictionById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the prisoner contact restriction. */
        prisonerContactRestrictionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully deleted prisoner contact restriction */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContactRestriction']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No prisoner contact restriction reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContactRestriction']
        }
      }
    }
  }
  syncGetEmploymentById: {
    parameters: {
      query?: never
      header?: never
      path: {
        employmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The details of the employment record */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EmploymentEntity']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No employment record with this ID could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncEmployment']
        }
      }
    }
  }
  syncUpdateEmployment: {
    parameters: {
      query?: never
      header?: never
      path: {
        employmentId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncUpdateEmploymentRequest']
      }
    }
    responses: {
      /** @description Successfully updated an employment record */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncEmployment']
        }
      }
      /** @description Invalid data provided in the request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The employment record was not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncEmployment']
        }
      }
    }
  }
  syncDeleteEmploymentById: {
    parameters: {
      query?: never
      header?: never
      path: {
        employmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully deleted an employment record */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No employment record with this ID could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  syncGetContactById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a contact. */
        contactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the contact */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContact']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContact']
        }
      }
    }
  }
  syncUpdateContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact. */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncUpdateContactRequest']
      }
    }
    responses: {
      /** @description Successfully updated contact */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContact']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContact']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Contact not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContact']
        }
      }
    }
  }
  syncDeleteContactById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact. */
        contactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully deleted contact */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  syncGetContactRestrictionById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a contact restriction. */
        contactRestrictionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the contact restriction */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactRestriction']
        }
      }
      /** @description No contact restriction reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactRestriction']
        }
      }
    }
  }
  syncUpdateContactRestriction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact restriction. */
        contactRestrictionId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncUpdateContactRestrictionRequest']
      }
    }
    responses: {
      /** @description Successfully updated contact restriction */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactRestriction']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactRestriction']
        }
      }
      /** @description Contact restriction not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactRestriction']
        }
      }
    }
  }
  syncDeleteContactRestrictionById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact restriction. */
        contactRestrictionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully deleted contact restriction */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactRestriction']
        }
      }
      /** @description No contact restriction reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactRestriction']
        }
      }
    }
  }
  syncGetContactPhoneById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a contact phone. */
        contactPhoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the contact phone */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactPhone']
        }
      }
      /** @description No contact reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactPhone']
        }
      }
    }
  }
  syncUpdateContactPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact phone. */
        contactPhoneId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncUpdateContactPhoneRequest']
      }
    }
    responses: {
      /** @description Successfully updated contact phone */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactPhone']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactPhone']
        }
      }
      /** @description Contact phone not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactPhone']
        }
      }
    }
  }
  syncDeleteContactPhoneById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact phone. */
        contactPhoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully deleted contact phone */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactPhone']
        }
      }
      /** @description No contact phone with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactPhone']
        }
      }
    }
  }
  syncGetContactIdentityById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a contact identity. */
        contactIdentityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the contact identity */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactIdentity']
        }
      }
      /** @description No contact identity with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactIdentity']
        }
      }
    }
  }
  syncUpdateContactIdentity: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact identity. */
        contactIdentityId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncUpdateContactIdentityRequest']
      }
    }
    responses: {
      /** @description Successfully updated contact identity */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactIdentity']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactIdentity']
        }
      }
      /** @description Contact identity not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactIdentity']
        }
      }
    }
  }
  syncDeleteContactIdentityById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact identity. */
        contactIdentityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully deleted contact identity */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactIdentity']
        }
      }
      /** @description No contact identity with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactIdentity']
        }
      }
    }
  }
  syncGetContactEmailById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a contact email. */
        contactEmailId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the contact email */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactEmail']
        }
      }
      /** @description No contact email reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactEmail']
        }
      }
    }
  }
  syncUpdateContactEmail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact email. */
        contactEmailId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncUpdateContactEmailRequest']
      }
    }
    responses: {
      /** @description Successfully updated contact email */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactEmail']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactEmail']
        }
      }
      /** @description Contact email not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactEmail']
        }
      }
    }
  }
  syncDeleteContactEmailById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact email. */
        contactEmailId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully deleted contact email */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactEmail']
        }
      }
      /** @description No contact email reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactEmail']
        }
      }
    }
  }
  syncGetContactAddressById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for a contact address. */
        contactAddressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the contact address */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddress']
        }
      }
      /** @description No contact address reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddress']
        }
      }
    }
  }
  syncUpdateContactAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact address. */
        contactAddressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncUpdateContactAddressRequest']
      }
    }
    responses: {
      /** @description Successfully updated contact address */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddress']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddress']
        }
      }
      /** @description Contact address not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddress']
        }
      }
    }
  }
  syncDeleteContactAddressById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact address. */
        contactAddressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully deleted contact address */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddress']
        }
      }
      /** @description No contact address reference with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddress']
        }
      }
    }
  }
  syncGetContactPhoneById_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for an address-specific phone number */
        contactAddressPhoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The details of the address-specific phone number */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddressPhone']
        }
      }
      /** @description No address-specific phone number with this ID could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddressPhone']
        }
      }
    }
  }
  syncUpdateContactAddressPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for an address-specific phone number */
        contactAddressPhoneId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncUpdateContactAddressPhoneRequest']
      }
    }
    responses: {
      /** @description Successfully updated an address-specific phone */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddressPhone']
        }
      }
      /** @description Invalid data provided in the request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddressPhone']
        }
      }
      /** @description The address-specific phone number was not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddressPhone']
        }
      }
    }
  }
  syncDeleteContactAddressPhoneById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the address-specific phone number */
        contactAddressPhoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully deleted an address-specific phone number */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddressPhone']
        }
      }
      /** @description No address-specific phone number with this ID could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddressPhone']
        }
      }
    }
  }
  getNumberOfChildren: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Prisoner number of children retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerNumberOfChildrenResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the number of children for this prisoner */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createOrUpdateNumberOfChildren: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateOrUpdatePrisonerNumberOfChildrenRequest']
      }
    }
    responses: {
      /** @description Prisoner number of children created/updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerNumberOfChildrenResponse']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDomesticStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Prisoner domestic status retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerDomesticStatusResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the active domestic status for prisoner. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createOrUpdateDomesticStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerNumber: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateOrUpdatePrisonerDomesticStatusRequest']
      }
    }
    responses: {
      /** @description Prisoner domestic status created/updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerDomesticStatusResponse']
        }
      }
      /** @description Invalid input data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the prisoner or an active domestic status value. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePrisonerContactRestriction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the prisoner contact relationship
         * @example 123456
         */
        prisonerContactId: number
        /**
         * @description The id of the  restriction
         * @example 123456
         */
        prisonerContactRestrictionId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePrisonerContactRestrictionRequest']
      }
    }
    responses: {
      /** @description Updated the prisoner contact restriction successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContactRestrictionDetails']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the prisoner contact relationship or prisoner contact restriction */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  merge: {
    parameters: {
      query?: never
      header?: never
      path: {
        keepingPrisonerNumber: string
        removedPrisonerNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successfully merged Prisoner's records */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': unknown
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateContactGlobalRestriction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
        /**
         * @description The id of the global restriction
         * @example 123456
         */
        contactRestrictionId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContactRestrictionRequest']
      }
    }
    responses: {
      /** @description Updated the global restriction successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactRestrictionDetails']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or global restriction */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
        /**
         * @description The id of the contact phone
         * @example 987654
         */
        contactPhoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the phone successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactPhoneDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or phone this request is for */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
        /**
         * @description The id of the contact phone
         * @example 987654
         */
        contactPhoneId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePhoneRequest']
      }
    }
    responses: {
      /** @description Updated the contact phone successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactPhoneDetails']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or phone by their ids */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
        /**
         * @description The id of the contact phone
         * @example 987654
         */
        contactPhoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Deleted the contact phone successfully */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactPhoneDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or phone by their ids */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIdentityNumber: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
        /**
         * @description The id of the contact identity
         * @example 987654
         */
        contactIdentityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the identity successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactIdentityDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or identity this request is for */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateIdentityNumber: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
        /**
         * @description The id of the contact identity
         * @example 987654
         */
        contactIdentityId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateIdentityRequest']
      }
    }
    responses: {
      /** @description Updated the contact identity successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactIdentityDetails']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or identity by their ids */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteIdentityNumber: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
        /**
         * @description The id of the contact identity
         * @example 987654
         */
        contactIdentityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Deleted the contact identity successfully */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactIdentityDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or identity by their ids */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getEmployment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
        /**
         * @description The id of the employment
         * @example 123456
         */
        employmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The employment was found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EmploymentDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact or employment with that id could be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateEmployment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
        /**
         * @description The id of the employment
         * @example 123456
         */
        employmentId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEmploymentRequest']
      }
    }
    responses: {
      /** @description The employment was updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EmploymentDetails']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact or employment with that id could be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteEmployment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
        /**
         * @description The id of the employment
         * @example 123456
         */
        employmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The employment was deleted successfully */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact or employment with that id could be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getEmailAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
        /**
         * @description The id of the contact email
         * @example 987654
         */
        contactEmailId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the email successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactEmailDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or email this request is for */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateEmailAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
        /**
         * @description The id of the contact email
         * @example 987654
         */
        contactEmailId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEmailRequest']
      }
    }
    responses: {
      /** @description Updated the contact email successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactEmailDetails']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or email by their ids */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteEmailAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
        /**
         * @description The id of the contact email
         * @example 987654
         */
        contactEmailId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Deleted the contact email successfully */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactEmailDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or email by their ids */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getContactAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The contact ID
         * @example 123456
         */
        contactId: number
        /**
         * @description The contact address ID
         * @example 122
         */
        contactAddressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the address successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactAddressResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or address by their IDs */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateContactAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The contact ID
         * @example 123456
         */
        contactId: number
        /**
         * @description The contact address ID
         * @example 1233
         */
        contactAddressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContactAddressRequest']
      }
    }
    responses: {
      /** @description Updated the contact address successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactAddressResponse']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or address by ID */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteContactAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The contact ID
         * @example 123
         */
        contactId: number
        /**
         * @description The contact address ID
         * @example 456
         */
        contactAddressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Deleted the contact address successfully */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactAddressResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or address by the provided IDs */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  patchContactAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The contact ID
         * @example 123456
         */
        contactId: number
        /**
         * @description The contact address ID
         * @example 1233
         */
        contactAddressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchContactAddressRequest']
      }
    }
    responses: {
      /** @description Patched the contact address successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactAddressResponse']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or address by ID */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getContactAddressPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The contact ID
         * @example 123456
         */
        contactId: number
        /**
         * @description The contact address ID
         * @example 122
         */
        contactAddressId: number
        /**
         * @description The address-specific phone ID
         * @example 979
         */
        contactAddressPhoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the address-specific phone number successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactAddressPhoneDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact, address or phone number by ID */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateContactAddressPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The contact ID
         * @example 123
         */
        contactId: number
        /**
         * @description The contact address ID
         * @example 878
         */
        contactAddressId: number
        /**
         * @description The address-specific phone ID
         * @example 979
         */
        contactAddressPhoneId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContactAddressPhoneRequest']
      }
    }
    responses: {
      /** @description Updated the address-specific phone number successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactAddressPhoneDetails']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact, address or phone number by ID */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteContactAddress_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The contact ID
         * @example 123
         */
        contactId: number
        /**
         * @description The contact address ID
         * @example 456
         */
        contactAddressId: number
        /**
         * @description The address-specific phone ID
         * @example 979
         */
        contactAddressPhoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Deleted the address-specific phone number */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactAddressPhoneDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact, address or address specific phone number by ID */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncCreatePrisonerRestriction: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncCreatePrisonerRestrictionRequest']
      }
    }
    responses: {
      /** @description Successfully created prisoner restriction */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerRestriction']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncCreatePrisonerContact: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncCreatePrisonerContactRequest']
      }
    }
    responses: {
      /** @description Successfully created prisoner contact */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContact']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The requested combination of prisoner, contact and relationship to prisoner already exists. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncCreatePrisonerContactRestriction: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncCreatePrisonerContactRestrictionRequest']
      }
    }
    responses: {
      /** @description Successfully created prisoner contact restriction */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerContactRestriction']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncCreateEmployment: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncCreateEmploymentRequest']
      }
    }
    responses: {
      /** @description Successfully created an employment record */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncEmployment']
        }
      }
      /** @description Invalid data provided in the request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncCreateContact: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncCreateContactRequest']
      }
    }
    responses: {
      /** @description Successfully created contact */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContact']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict. The personId provided in the request already exists as a contact */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncCreateContactRestriction: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncCreateContactRestrictionRequest']
      }
    }
    responses: {
      /** @description Successfully created contact restriction */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactRestriction']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncCreateContactPhone: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncCreateContactPhoneRequest']
      }
    }
    responses: {
      /** @description Successfully created contact phone */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactPhone']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncCreateContactIdentity: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncCreateContactIdentityRequest']
      }
    }
    responses: {
      /** @description Successfully created contact identity */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactIdentity']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncCreateContactEmail: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncCreateContactEmailRequest']
      }
    }
    responses: {
      /** @description Successfully created contact email */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactEmail']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncCreateContactAddress: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncCreateContactAddressRequest']
      }
    }
    responses: {
      /** @description Successfully created contact address */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddress']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  syncCreateContactAddressPhone: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SyncCreateContactAddressPhoneRequest']
      }
    }
    responses: {
      /** @description Successfully created an address-specific phone number */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactAddressPhone']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The contact address phone number was not found for the provided ID */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  resetPrisonerContacts: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ResetPrisonerContactRequest']
      }
    }
    responses: {
      /** @description The relationships and restrictions were successfully replaced */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResetPrisonerContactResponse']
        }
      }
      /** @description The request failed validation with invalid or missing data supplied */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  mergePrisonerContacts: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MergePrisonerContactRequest']
      }
    }
    responses: {
      /** @description The relationships and restrictions were successfully replaced */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MergePrisonerContactResponse']
        }
      }
      /** @description The request failed validation with invalid or missing data supplied */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addContactRelationship: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AddContactRelationshipRequest']
      }
    }
    responses: {
      /** @description Created the relationship successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContactRelationshipDetails']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the prisoner or contact that this relationship relates to */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The requested combination of prisoner, contact and relationship to prisoner already exists. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerContactRestrictionsByPrisonerContactId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the prisoner contact
         * @example 1L
         */
        prisonerContactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Prisoner Contact relationship */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContactRestrictionsResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The Prisoner contact relationship was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPrisonerContactRestriction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the prisoner contact relationship
         * @example 123456
         */
        prisonerContactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePrisonerContactRestrictionRequest']
      }
    }
    responses: {
      /** @description Created the prisoner contact restriction successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContactRestrictionDetails']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the prisoner contact relationship this prisoner contact restriction is for */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migratePrisonerRestrictions: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MigratePrisonerRestrictionsRequest']
      }
    }
    responses: {
      /** @description The restrictions were migrated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerRestrictionsMigrationResponse']
        }
      }
      /** @description The request failed validation with invalid or missing data supplied */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find reference data for the supplied restriction type */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateNumberOfChildren: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MigratePrisonerNumberOfChildrenRequest']
      }
    }
    responses: {
      /** @description The prisoner's number of children was migrated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerNumberOfChildrenMigrationResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateDomesticStatus: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MigratePrisonerDomesticStatusRequest']
      }
    }
    responses: {
      /** @description The domestic status was migrated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerDomesticStatusMigrationResponse']
        }
      }
      /** @description The request failed validation with invalid or missing data supplied */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find reference data for the supplied domestic status code */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateContact: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MigrateContactRequest']
      }
    }
    responses: {
      /** @description The contact and associated data was created successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrateContactResponse']
        }
      }
      /** @description The request failed validation with invalid or missing data supplied */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict. The request contained a personId which already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createContact: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContactRequest']
      }
    }
    responses: {
      /** @description Created the contact successfully */
      201: {
        headers: {
          /**
           * @description The URL where you can load the contact
           * @example /contact/123456
           */
          Location?: unknown
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactCreationResult']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the prisoner that this contact has a relationship to */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getContactGlobalRestrictions: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the contact and their restrictions */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactRestrictionDetails'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createContactGlobalRestriction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContactRestrictionRequest']
      }
    }
    responses: {
      /** @description Created the global restriction successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactRestrictionDetails']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact this global restriction is for */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMultipleContactPhoneNumber: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateMultiplePhoneNumbersRequest']
      }
    }
    responses: {
      /** @description Created all the contact phone numbers successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactPhoneDetails'][]
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact this phone is for */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePhoneRequest']
      }
    }
    responses: {
      /** @description Created the contact phone successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactPhoneDetails']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact this phone is for */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createIdentityNumber: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateIdentityRequest']
      }
    }
    responses: {
      /** @description Created the contact identity successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactIdentityDetails']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact this identity is for */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMultipleIdentities: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateMultipleIdentitiesRequest']
      }
    }
    responses: {
      /** @description Created all identities successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactIdentityDetails'][]
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact this identity is for */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createEmployment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateEmploymentRequest']
      }
    }
    responses: {
      /** @description The employment was created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EmploymentDetails']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact with that id could be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  patchEmployment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchEmploymentsRequest']
      }
    }
    responses: {
      /** @description The changes were applied successfully. Returns full list of employments after update. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EmploymentDetails'][]
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact with that id could be found or employments for update or delete could not be found or an organisation could not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMultipleEmailAddresses: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateMultipleEmailsRequest']
      }
    }
    responses: {
      /** @description Created all the contact email addresses successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactEmailDetails'][]
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact this email is for */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createEmailAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateEmailRequest']
      }
    }
    responses: {
      /** @description Created the contact email successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactEmailDetails']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact this email is for */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createContactAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContactAddressRequest']
      }
    }
    responses: {
      /** @description Created the contact address successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactAddressResponse']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the address */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMultipleContactAddressPhones: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 111
         */
        contactId: number
        /**
         * @description The id of the address
         * @example 222
         */
        contactAddressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateMultiplePhoneNumbersRequest']
      }
    }
    responses: {
      /** @description Created all the address-specific phone numbers successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactAddressPhoneDetails'][]
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or address provided */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createContactAddressPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 111
         */
        contactId: number
        /**
         * @description The id of the address
         * @example 222
         */
        contactAddressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContactAddressPhoneRequest']
      }
    }
    responses: {
      /** @description Created the address-specific phone number successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactAddressPhoneDetails']
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact or address provided */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerContactById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the prisoner contact relationship to be returned
         * @example 1L
         */
        prisonerContactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Prisoner Contact relationship */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContactRelationshipDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The Prisoner contact relationship was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteContactRelationship: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the prisoner contact
         * @example 123456
         */
        prisonerContactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Deleted the relationship successfully */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the prisoner contact that this relationship relates to */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The relationship has attached entities such as restrictions and cannot be deleted. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  patchContactRelationship: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the prisoner contact
         * @example 123456
         */
        prisonerContactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchRelationshipRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Updated the relationship successfully */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description The request has invalid or missing fields */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the prisoner contact that this relationship relates to */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The requested combination of prisoner, contact and relationship to prisoner already exists. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the contact */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  patchContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchContactRequest']
      }
    }
    responses: {
      /** @description The contact was updated. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PatchContactResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reconcileSinglePrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact. */
        prisonerNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Reconciliation object for one contact */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncPrisonerReconcile']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reconcileSingleContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The internal ID for the contact. */
        contactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Reconciliation object for one contact */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SyncContactReconcile']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reconcileContacts: {
    parameters: {
      query?: {
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable contact IDs returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagedModelSyncContactId']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getReferenceDataByGroup: {
    parameters: {
      query: {
        /** @description Sort configuration - default displayOrder, description */
        sort: components['schemas']['Sort']
        /** @description Whether to only return active codes or not, defaults to true */
        activeOnly?: boolean
      }
      header?: never
      path: {
        /**
         * @description The group code of the reference codes to load
         * @example PHONE_TYPE
         */
        groupCode: components['schemas']['ReferenceCodeGroup']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of reference data codes/values */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllContacts: {
    parameters: {
      query?: {
        /** @description If specified and true then only relationships that are active will be returned, or if false only inactive ones. If omitted, then all relationships will be returned. */
        active?: boolean
        /** @description If specified then only relationships of that type will be returned. If omitted, then all relationship types will be returned. Use "S" for Social and "O" for Official relationships. */
        relationshipType?: 'S' | 'O'
        /** @description If specified and true only returns results where the contact is listed as an emergency contact for the prisoner or is not an emergency contact if false */
        emergencyContact?: boolean
        /** @description If specified and true only returns results where the contact is listed as next of kin for the prisoner or is not next of kin if false */
        nextOfKin?: boolean
        /** @description If specified and true only includes results that are listed as either an emergency contact or next of kin for the prisoner. If false then only returns contacts that are neither next of kin or emergency contact. */
        emergencyContactOrNextOfKin?: boolean
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path: {
        /**
         * @description The prison number of the prisoner who's contacts will be returned
         * @example A1234BC
         */
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description A page of matching contact relationships for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagedModelPrisonerContactSummary']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The Prisoner was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllSummariesForPrisonerAndContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The prison number of the prisoner who's contacts will be returned
         * @example A1234BC
         */
        prisonNumber: string
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description A page of matching contact relationships for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContactSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The Prisoner was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getContactRelationshipCount: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The prison number of the prisoner who's contacts will be returned
         * @example A1234BC
         */
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Count of active prisoner contact relationships */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerContactRelationshipCount']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getContactName: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the contact */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactNameDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No contact with that id could be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getContactLinkedPrisoners: {
    parameters: {
      query?: {
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
      }
      header?: never
      path: {
        /**
         * @description The id of the contact
         * @example 123456
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found the the linked prisoners successfully. Can be an empty list. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagedModelLinkedPrisonerDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Could not find the the contact */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  searchContacts: {
    parameters: {
      query: {
        /**
         * @description Last name of the contact
         * @example Jones
         */
        lastName: string
        /**
         * @description First name of the contact
         * @example Elton
         */
        firstName?: string
        /**
         * @description Middle names of the contact
         * @example Simon
         */
        middleNames?: string
        /**
         * @description Date of Birth of the contact in ISO format
         * @example 30/12/2010
         */
        dateOfBirth?: string
        /**
         * @description If a prisoner number is specified, check all matching contacts for any existing relationships to the prisoner. All matching contacts are returned regardless of whether they have an existing relationship to the prisoner or not.
         * @example A1234BC
         */
        includeAnyExistingRelationshipsToPrisoner?: string
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Found contacts */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagedModelContactSearchResultItem']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
